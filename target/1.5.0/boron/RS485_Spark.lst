
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/RS485_Spark/target/1.5.0/boron/RS485_Spark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d64f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e310  000d64f4  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000046c  2003e384  2003e384  0002e384  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6568  000d6568  00026568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6590  000d6590  00026590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bc552  00000000  00000000  00026594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f654  00000000  00000000  000e2ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019af9  00000000  00000000  000f213a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002160  00000000  00000000  0010bc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ea0  00000000  00000000  0010dd93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000335f1  00000000  00000000  00111c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025d78  00000000  00000000  00145224  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffad7  00000000  00000000  0016af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c224  00000000  00000000  0026aa74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f84b 	bl	d60cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f850 	bl	d60e2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e310 	.word	0x2003e310
   d404c:	000d64f4 	.word	0x000d64f4
   d4050:	2003e384 	.word	0x2003e384
   d4054:	2003e384 	.word	0x2003e384
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fd77 	bl	d4b50 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d64f0 	.word	0x000d64f0
   d4084:	000d64b8 	.word	0x000d64b8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b814 	b.w	d40b4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f91f 	bl	d42d0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bd1d 	b.w	d4ad4 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 baf5 	b.w	d4688 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 baf3 	b.w	d4688 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
size_t bytes;
float resultTemp = 0;
float resultUltra = 0;
//The setup function is called once at startup of the sketch
void setup()
{
   d40b4:	b510      	push	{r4, lr}
 Serial1.begin(19200);
 pinMode(rts, OUTPUT);
   d40b6:	4c0a      	ldr	r4, [pc, #40]	; (d40e0 <setup+0x2c>)
float resultTemp = 0;
float resultUltra = 0;
//The setup function is called once at startup of the sketch
void setup()
{
 Serial1.begin(19200);
   d40b8:	f000 ff1a 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d40bc:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d40c0:	f000 ff10 	bl	d4ee4 <_ZN11USARTSerial5beginEm>
 pinMode(rts, OUTPUT);
   d40c4:	2101      	movs	r1, #1
   d40c6:	8820      	ldrh	r0, [r4, #0]
   d40c8:	f001 f8fe 	bl	d52c8 <pinMode>
 digitalWrite(rts, LOW);
   d40cc:	2100      	movs	r1, #0
   d40ce:	8820      	ldrh	r0, [r4, #0]
   d40d0:	f001 f90b 	bl	d52ea <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40d4:	f000 f96c 	bl	d43b0 <HAL_Timer_Get_Milli_Seconds>
 

 prevTime = millis();
   d40d8:	4b02      	ldr	r3, [pc, #8]	; (d40e4 <setup+0x30>)
   d40da:	6018      	str	r0, [r3, #0]
   d40dc:	bd10      	pop	{r4, pc}
   d40de:	bf00      	nop
   d40e0:	2003e318 	.word	0x2003e318
   d40e4:	2003e388 	.word	0x2003e388

000d40e8 <_Z11sendCommandPh>:
/*sendCommand(...)******************************************************************************
 * General function that sends command to RS485 peripheral device
 * <CR> is added to all commands
 * For RS485 communication, RTS pin has to be HIGH to allow writing to peripheral
 **********************************************************************************************/
void sendCommand(byte *cmd) {
   d40e8:	b538      	push	{r3, r4, r5, lr}
    Serial.print(cmd[i]);
    Serial.println("");
 }
 */

 digitalWrite(rts, HIGH); // set RTS to HIGH to allow writing to MAX485
   d40ea:	4b11      	ldr	r3, [pc, #68]	; (d4130 <_Z11sendCommandPh+0x48>)
/*sendCommand(...)******************************************************************************
 * General function that sends command to RS485 peripheral device
 * <CR> is added to all commands
 * For RS485 communication, RTS pin has to be HIGH to allow writing to peripheral
 **********************************************************************************************/
void sendCommand(byte *cmd) {
   d40ec:	4604      	mov	r4, r0
    Serial.print(cmd[i]);
    Serial.println("");
 }
 */

 digitalWrite(rts, HIGH); // set RTS to HIGH to allow writing to MAX485
   d40ee:	2101      	movs	r1, #1
   d40f0:	8818      	ldrh	r0, [r3, #0]
   d40f2:	f001 f8fa 	bl	d52ea <digitalWrite>
 delay(100);
   d40f6:	2064      	movs	r0, #100	; 0x64
   d40f8:	f000 fcae 	bl	d4a58 <delay>
   d40fc:	1e65      	subs	r5, r4, #1
   d40fe:	3405      	adds	r4, #5

 for(int i=0; i < 6; i++){
   Serial1.write(cmd[i]); 
   d4100:	f000 fef6 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d4104:	6803      	ldr	r3, [r0, #0]
   d4106:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d410a:	689b      	ldr	r3, [r3, #8]
   d410c:	4798      	blx	r3
 */

 digitalWrite(rts, HIGH); // set RTS to HIGH to allow writing to MAX485
 delay(100);

 for(int i=0; i < 6; i++){
   d410e:	42a5      	cmp	r5, r4
   d4110:	d1f6      	bne.n	d4100 <_Z11sendCommandPh+0x18>
   Serial1.write(cmd[i]); 
  // Serial.print(cmd[i]);
 }
 // send command
 Serial1.flush(); // Make sure message is fully transferred
   d4112:	f000 feed 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d4116:	6803      	ldr	r3, [r0, #0]
   d4118:	69db      	ldr	r3, [r3, #28]
   d411a:	4798      	blx	r3
 digitalWrite(RTS, LOW); // set RTS to LOW to receive answer
   d411c:	2002      	movs	r0, #2
   d411e:	2100      	movs	r1, #0
   d4120:	f001 f8e3 	bl	d52ea <digitalWrite>
 delay(10);
   d4124:	200a      	movs	r0, #10
}
   d4126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Serial.print(cmd[i]);
 }
 // send command
 Serial1.flush(); // Make sure message is fully transferred
 digitalWrite(RTS, LOW); // set RTS to LOW to receive answer
 delay(10);
   d412a:	f000 bc95 	b.w	d4a58 <delay>
   d412e:	bf00      	nop
   d4130:	2003e318 	.word	0x2003e318

000d4134 <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4134:	b538      	push	{r3, r4, r5, lr}
   d4136:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4138:	b91a      	cbnz	r2, d4142 <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
   d4140:	e002      	b.n	d4148 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4142:	b2d2      	uxtb	r2, r2
   d4144:	f000 fb87 	bl	d4856 <_ZN5Print11printNumberEmh>
   d4148:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d414a:	4628      	mov	r0, r5
   d414c:	f000 fb6d 	bl	d482a <_ZN5Print7printlnEv>
        return n;
    }
   d4150:	4420      	add	r0, r4
   d4152:	bd38      	pop	{r3, r4, r5, pc}
   d4154:	0000      	movs	r0, r0
	...

000d4158 <_Z4SendPhS_>:
 Serial.println();
 }
}


void Send(byte * cmd, byte* ret) {
   d4158:	b538      	push	{r3, r4, r5, lr}
   d415a:	460c      	mov	r4, r1
 // use default send function
 sendCommand(cmd);
   d415c:	f7ff ffc4 	bl	d40e8 <_Z11sendCommandPh>
 //ret[bytes] = '\0';
  
  
  //size_t bytes = Serial1.readBytesUntil(1, ret, 6);

  if (Serial1.available()){  //Read return data package (NOTE: Demo is just for your reference, the data package haven't be calibrated yet)
   d4160:	f000 fec6 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d4164:	6803      	ldr	r3, [r0, #0]
   d4166:	691b      	ldr	r3, [r3, #16]
   d4168:	4798      	blx	r3
   d416a:	2800      	cmp	r0, #0
   d416c:	f000 808d 	beq.w	d428a <_Z4SendPhS_+0x132>
   d4170:	2500      	movs	r5, #0
    for(int j=0; j < 12; j++){
      ret[j++]=(Serial1.read());
   d4172:	f000 febd 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d4176:	6803      	ldr	r3, [r0, #0]
   d4178:	695b      	ldr	r3, [r3, #20]
   d417a:	4798      	blx	r3
   d417c:	5560      	strb	r0, [r4, r5]
  
  
  //size_t bytes = Serial1.readBytesUntil(1, ret, 6);

  if (Serial1.available()){  //Read return data package (NOTE: Demo is just for your reference, the data package haven't be calibrated yet)
    for(int j=0; j < 12; j++){
   d417e:	3502      	adds	r5, #2
   d4180:	2d0c      	cmp	r5, #12
   d4182:	d1f6      	bne.n	d4172 <_Z4SendPhS_+0x1a>
      ret[j++]=(Serial1.read());
      
    }
    Serial.println("Data Begin");
   d4184:	f000 fde0 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4188:	4945      	ldr	r1, [pc, #276]	; (d42a0 <_Z4SendPhS_+0x148>)
    Serial.println("Data End");

    Serial1.flush();
    Serial.println("Received data Done");

    resultTemp = (float(ret[8])*0.48876)-50;
   d418a:	4d46      	ldr	r5, [pc, #280]	; (d42a4 <_Z4SendPhS_+0x14c>)
  if (Serial1.available()){  //Read return data package (NOTE: Demo is just for your reference, the data package haven't be calibrated yet)
    for(int j=0; j < 12; j++){
      ret[j++]=(Serial1.read());
      
    }
    Serial.println("Data Begin");
   d418c:	f000 fb59 	bl	d4842 <_ZN5Print7printlnEPKc>
    Serial.println(ret[0],HEX); //byte 1    //Sensor ID Tag
   d4190:	f000 fdda 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4194:	2210      	movs	r2, #16
   d4196:	7821      	ldrb	r1, [r4, #0]
   d4198:	f7ff ffcc 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println(ret[2],HEX); //byte 2    //Response Code
   d419c:	f000 fdd4 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41a0:	2210      	movs	r2, #16
   d41a2:	78a1      	ldrb	r1, [r4, #2]
   d41a4:	f7ff ffc6 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println(ret[4],HEX); //byte 3    //Range LSB
   d41a8:	f000 fdce 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41ac:	2210      	movs	r2, #16
   d41ae:	7921      	ldrb	r1, [r4, #4]
   d41b0:	f7ff ffc0 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println(ret[6],HEX); //byte 4    //Range MSB
   d41b4:	f000 fdc8 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41b8:	2210      	movs	r2, #16
   d41ba:	79a1      	ldrb	r1, [r4, #6]
   d41bc:	f7ff ffba 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println(ret[8],HEX); //byte 5    //Temperature Data
   d41c0:	f000 fdc2 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41c4:	2210      	movs	r2, #16
   d41c6:	7a21      	ldrb	r1, [r4, #8]
   d41c8:	f7ff ffb4 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println(ret[10],HEX); //byte 6   //Checksum mod 256
   d41cc:	f000 fdbc 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41d0:	2210      	movs	r2, #16
   d41d2:	7aa1      	ldrb	r1, [r4, #10]
   d41d4:	f7ff ffae 	bl	d4134 <_ZN5Print7printlnIhLi0EEEjT_i>
    Serial.println("Data End");
   d41d8:	f000 fdb6 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41dc:	4932      	ldr	r1, [pc, #200]	; (d42a8 <_Z4SendPhS_+0x150>)
   d41de:	f000 fb30 	bl	d4842 <_ZN5Print7printlnEPKc>

    Serial1.flush();
   d41e2:	f000 fe85 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d41e6:	6803      	ldr	r3, [r0, #0]
   d41e8:	69db      	ldr	r3, [r3, #28]
   d41ea:	4798      	blx	r3
    Serial.println("Received data Done");
   d41ec:	f000 fdac 	bl	d4d48 <_Z16_fetch_usbserialv>
   d41f0:	492e      	ldr	r1, [pc, #184]	; (d42ac <_Z4SendPhS_+0x154>)
   d41f2:	f000 fb26 	bl	d4842 <_ZN5Print7printlnEPKc>

    resultTemp = (float(ret[8])*0.48876)-50;
   d41f6:	7a20      	ldrb	r0, [r4, #8]
   d41f8:	ee07 0a90 	vmov	s15, r0
   d41fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4200:	ee17 0a90 	vmov	r0, s15
   d4204:	f001 fbb8 	bl	d5978 <__aeabi_f2d>
   d4208:	a323      	add	r3, pc, #140	; (adr r3, d4298 <_Z4SendPhS_+0x140>)
   d420a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d420e:	f001 fc07 	bl	d5a20 <__aeabi_dmul>
   d4212:	2200      	movs	r2, #0
   d4214:	4b26      	ldr	r3, [pc, #152]	; (d42b0 <_Z4SendPhS_+0x158>)
   d4216:	f001 fa4f 	bl	d56b8 <__aeabi_dsub>
   d421a:	f001 fef9 	bl	d6010 <__aeabi_d2f>
   d421e:	6028      	str	r0, [r5, #0]
    Serial.print("Temperature: ");
   d4220:	f000 fd92 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4224:	4923      	ldr	r1, [pc, #140]	; (d42b4 <_Z4SendPhS_+0x15c>)
   d4226:	f000 faf9 	bl	d481c <_ZN5Print5printEPKc>
    Serial.print(resultTemp);
   d422a:	f000 fd8d 	bl	d4d48 <_Z16_fetch_usbserialv>
   d422e:	ed95 0a00 	vldr	s0, [r5]
    Serial.println(" C");

    resultUltra = (float(ret[6]*256)+float(ret[4]))/128;
   d4232:	4d21      	ldr	r5, [pc, #132]	; (d42b8 <_Z4SendPhS_+0x160>)
    Serial1.flush();
    Serial.println("Received data Done");

    resultTemp = (float(ret[8])*0.48876)-50;
    Serial.print("Temperature: ");
    Serial.print(resultTemp);
   d4234:	2102      	movs	r1, #2
   d4236:	f000 fbed 	bl	d4a14 <_ZN5Print5printEfi>
    Serial.println(" C");
   d423a:	f000 fd85 	bl	d4d48 <_Z16_fetch_usbserialv>
   d423e:	491f      	ldr	r1, [pc, #124]	; (d42bc <_Z4SendPhS_+0x164>)
   d4240:	f000 faff 	bl	d4842 <_ZN5Print7printlnEPKc>

    resultUltra = (float(ret[6]*256)+float(ret[4]))/128;
   d4244:	79a3      	ldrb	r3, [r4, #6]
   d4246:	021b      	lsls	r3, r3, #8
   d4248:	ee07 3a90 	vmov	s15, r3
   d424c:	7923      	ldrb	r3, [r4, #4]
   d424e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d4252:	ee07 3a90 	vmov	s15, r3
   d4256:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d425a:	ee77 7a27 	vadd.f32	s15, s14, s15
   d425e:	ed9f 7a18 	vldr	s14, [pc, #96]	; d42c0 <_Z4SendPhS_+0x168>
   d4262:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4266:	edc5 7a00 	vstr	s15, [r5]
    Serial.print("Level: ");
   d426a:	f000 fd6d 	bl	d4d48 <_Z16_fetch_usbserialv>
   d426e:	4915      	ldr	r1, [pc, #84]	; (d42c4 <_Z4SendPhS_+0x16c>)
   d4270:	f000 fad4 	bl	d481c <_ZN5Print5printEPKc>
    Serial.print(resultUltra);
   d4274:	f000 fd68 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4278:	2102      	movs	r1, #2
   d427a:	ed95 0a00 	vldr	s0, [r5]
   d427e:	f000 fbc9 	bl	d4a14 <_ZN5Print5printEfi>
    Serial.println(" In");
   d4282:	f000 fd61 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4286:	4910      	ldr	r1, [pc, #64]	; (d42c8 <_Z4SendPhS_+0x170>)
   d4288:	e002      	b.n	d4290 <_Z4SendPhS_+0x138>
 // debug: can be accessed from caller
 //strcpy(debugString, ret);
  }
  else{
    Serial.println("Error reading RS485");
   d428a:	f000 fd5d 	bl	d4d48 <_Z16_fetch_usbserialv>
   d428e:	490f      	ldr	r1, [pc, #60]	; (d42cc <_Z4SendPhS_+0x174>)
  }



}
   d4290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println(" In");
 // debug: can be accessed from caller
 //strcpy(debugString, ret);
  }
  else{
    Serial.println("Error reading RS485");
   d4294:	f000 bad5 	b.w	d4842 <_ZN5Print7printlnEPKc>
   d4298:	05e5f30e 	.word	0x05e5f30e
   d429c:	3fdf47d8 	.word	0x3fdf47d8
   d42a0:	000d6168 	.word	0x000d6168
   d42a4:	2003e39c 	.word	0x2003e39c
   d42a8:	000d6173 	.word	0x000d6173
   d42ac:	000d617c 	.word	0x000d617c
   d42b0:	40490000 	.word	0x40490000
   d42b4:	000d618f 	.word	0x000d618f
   d42b8:	2003e3a0 	.word	0x2003e3a0
   d42bc:	000d619d 	.word	0x000d619d
   d42c0:	3c000000 	.word	0x3c000000
   d42c4:	000d61a0 	.word	0x000d61a0
   d42c8:	000d61a8 	.word	0x000d61a8
   d42cc:	000d61ac 	.word	0x000d61ac

000d42d0 <loop>:
 prevTime = millis();
}

// The loop function is called in an endless loop
void loop()
{
   d42d0:	b508      	push	{r3, lr}
 Serial1.flush();
   d42d2:	f000 fe0d 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d42d6:	6803      	ldr	r3, [r0, #0]
   d42d8:	69db      	ldr	r3, [r3, #28]
   d42da:	4798      	blx	r3
   d42dc:	f000 f868 	bl	d43b0 <HAL_Timer_Get_Milli_Seconds>
 currTime = millis();
   d42e0:	4b0a      	ldr	r3, [pc, #40]	; (d430c <loop+0x3c>)

 // Send data once per second
 if (currTime - prevTime >= 10000) {
   d42e2:	4a0b      	ldr	r2, [pc, #44]	; (d4310 <loop+0x40>)

// The loop function is called in an endless loop
void loop()
{
 Serial1.flush();
 currTime = millis();
   d42e4:	6018      	str	r0, [r3, #0]

 // Send data once per second
 if (currTime - prevTime >= 10000) {
   d42e6:	6813      	ldr	r3, [r2, #0]
   d42e8:	f242 710f 	movw	r1, #9999	; 0x270f
   d42ec:	1ac3      	subs	r3, r0, r3
   d42ee:	428b      	cmp	r3, r1
   d42f0:	d90a      	bls.n	d4308 <loop+0x38>
 prevTime = currTime;
   d42f2:	6010      	str	r0, [r2, #0]

 // Send command
 Send(sendRS485Request, data);
   d42f4:	4907      	ldr	r1, [pc, #28]	; (d4314 <loop+0x44>)
   d42f6:	4808      	ldr	r0, [pc, #32]	; (d4318 <loop+0x48>)
   d42f8:	f7ff ff2e 	bl	d4158 <_Z4SendPhS_>
 Serial.println();
   d42fc:	f000 fd24 	bl	d4d48 <_Z16_fetch_usbserialv>
 }
}
   d4300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 if (currTime - prevTime >= 10000) {
 prevTime = currTime;

 // Send command
 Send(sendRS485Request, data);
 Serial.println();
   d4304:	f000 ba91 	b.w	d482a <_ZN5Print7printlnEv>
   d4308:	bd08      	pop	{r3, pc}
   d430a:	bf00      	nop
   d430c:	2003e38c 	.word	0x2003e38c
   d4310:	2003e388 	.word	0x2003e388
   d4314:	2003e390 	.word	0x2003e390
   d4318:	2003e310 	.word	0x2003e310

000d431c <_GLOBAL__sub_I_rts>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d431c:	f000 b810 	b.w	d4340 <HAL_Pin_Map>

000d4320 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <netdb_freeaddrinfo+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	689b      	ldr	r3, [r3, #8]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030268 	.word	0x00030268

000d4330 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <netdb_getaddrinfo+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	68db      	ldr	r3, [r3, #12]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030268 	.word	0x00030268

000d4340 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_Pin_Map+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	681b      	ldr	r3, [r3, #0]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003022c 	.word	0x0003022c

000d4350 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_Pin_Mode+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	689b      	ldr	r3, [r3, #8]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003022c 	.word	0x0003022c

000d4360 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_Get_Pin_Mode+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	68db      	ldr	r3, [r3, #12]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003022c 	.word	0x0003022c

000d4370 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_GPIO_Write+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	691b      	ldr	r3, [r3, #16]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003022c 	.word	0x0003022c

000d4380 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_SPI_Init+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	69db      	ldr	r3, [r3, #28]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030230 	.word	0x00030230

000d4390 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_SPI_Is_Enabled+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a1b      	ldr	r3, [r3, #32]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030230 	.word	0x00030230

000d43a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_RNG_GetRandomNumber+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	685b      	ldr	r3, [r3, #4]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030218 	.word	0x00030218

000d43b0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	695b      	ldr	r3, [r3, #20]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030218 	.word	0x00030218

000d43c0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <os_thread_is_current+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	689b      	ldr	r3, [r3, #8]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030248 	.word	0x00030248

000d43d0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <os_thread_join+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	691b      	ldr	r3, [r3, #16]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030248 	.word	0x00030248

000d43e0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <os_thread_cleanup+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	695b      	ldr	r3, [r3, #20]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030248 	.word	0x00030248

000d43f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <os_mutex_recursive_create+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030248 	.word	0x00030248

000d4400 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <os_mutex_recursive_destroy+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030248 	.word	0x00030248

000d4410 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <inet_inet_ntop+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030264 	.word	0x00030264

000d4420 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USART_Init+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	681b      	ldr	r3, [r3, #0]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003023c 	.word	0x0003023c

000d4430 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USART_Write_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	68db      	ldr	r3, [r3, #12]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USART_Available_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	691b      	ldr	r3, [r3, #16]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Read_Data+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	695b      	ldr	r3, [r3, #20]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Peek_Data+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	699b      	ldr	r3, [r3, #24]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USART_Flush_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	69db      	ldr	r3, [r3, #28]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USART_Is_Enabled+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	6a1b      	ldr	r3, [r3, #32]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003023c 	.word	0x0003023c

000d4490 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USART_Available_Data_For_Write+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003023c 	.word	0x0003023c

000d44a0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USART_BeginConfig+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003023c 	.word	0x0003023c

000d44b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_I2C_Write_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6a1b      	ldr	r3, [r3, #32]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030228 	.word	0x00030228

000d44c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_I2C_Available_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030228 	.word	0x00030228

000d44d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_I2C_Read_Data+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030228 	.word	0x00030228

000d44e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_I2C_Peek_Data+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030228 	.word	0x00030228

000d44f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_I2C_Flush_Data+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030228 	.word	0x00030228

000d4500 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_I2C_Is_Enabled+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030228 	.word	0x00030228

000d4510 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_I2C_Init+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030228 	.word	0x00030228

000d4520 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_USB_USART_Init+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	681b      	ldr	r3, [r3, #0]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	0003024c 	.word	0x0003024c

000d4530 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_USB_USART_Available_Data+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	691b      	ldr	r3, [r3, #16]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003024c 	.word	0x0003024c

000d4540 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	695b      	ldr	r3, [r3, #20]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003024c 	.word	0x0003024c

000d4550 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_USB_USART_Receive_Data+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	699b      	ldr	r3, [r3, #24]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003024c 	.word	0x0003024c

000d4560 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_USB_USART_Send_Data+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	69db      	ldr	r3, [r3, #28]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003024c 	.word	0x0003024c

000d4570 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_USB_USART_Flush_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6a1b      	ldr	r3, [r3, #32]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003024c 	.word	0x0003024c

000d4580 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <set_system_mode+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	685b      	ldr	r3, [r3, #4]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030220 	.word	0x00030220

000d4590 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <system_delay_ms+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030220 	.word	0x00030220

000d45a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b03      	ldr	r3, [pc, #12]	; (d45b0 <system_ctrl_set_app_request_handler+0x10>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45aa:	9301      	str	r3, [sp, #4]
   d45ac:	bd08      	pop	{r3, pc}
   d45ae:	0000      	.short	0x0000
   d45b0:	00030220 	.word	0x00030220

000d45b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b03      	ldr	r3, [pc, #12]	; (d45c4 <system_ctrl_set_result+0x10>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45be:	9301      	str	r3, [sp, #4]
   d45c0:	bd08      	pop	{r3, pc}
   d45c2:	0000      	.short	0x0000
   d45c4:	00030220 	.word	0x00030220

000d45c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <network_connect+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	685b      	ldr	r3, [r3, #4]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030240 	.word	0x00030240

000d45d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <network_connecting+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	689b      	ldr	r3, [r3, #8]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030240 	.word	0x00030240

000d45e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <network_disconnect+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	68db      	ldr	r3, [r3, #12]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030240 	.word	0x00030240

000d45f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_ready+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	691b      	ldr	r3, [r3, #16]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_on+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	695b      	ldr	r3, [r3, #20]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_off+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	699b      	ldr	r3, [r3, #24]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_listen+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	69db      	ldr	r3, [r3, #28]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <network_listening+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6a1b      	ldr	r3, [r3, #32]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030240 	.word	0x00030240

000d4648 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <network_set_listen_timeout+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030240 	.word	0x00030240

000d4658 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <network_get_listen_timeout+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030240 	.word	0x00030240

000d4668 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <spark_set_random_seed_from_cloud_handler+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030244 	.word	0x00030244

000d4678 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <malloc+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	681b      	ldr	r3, [r3, #0]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003021c 	.word	0x0003021c

000d4688 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <free+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	685b      	ldr	r3, [r3, #4]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003021c 	.word	0x0003021c

000d4698 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4698:	2200      	movs	r2, #0
   d469a:	4611      	mov	r1, r2
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	f7ff bfcb 	b.w	d4638 <network_listening>

000d46a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46a2:	2200      	movs	r2, #0
   d46a4:	4611      	mov	r1, r2
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	f7ff bfd6 	b.w	d4658 <network_get_listen_timeout>

000d46ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46ac:	2200      	movs	r2, #0
   d46ae:	6840      	ldr	r0, [r0, #4]
   d46b0:	f7ff bfca 	b.w	d4648 <network_set_listen_timeout>

000d46b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46b4:	2200      	movs	r2, #0
   d46b6:	f081 0101 	eor.w	r1, r1, #1
   d46ba:	6840      	ldr	r0, [r0, #4]
   d46bc:	f7ff bfb4 	b.w	d4628 <network_listen>

000d46c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46c0:	2300      	movs	r3, #0
   d46c2:	461a      	mov	r2, r3
   d46c4:	4619      	mov	r1, r3
   d46c6:	6840      	ldr	r0, [r0, #4]
   d46c8:	f7ff bfa6 	b.w	d4618 <network_off>

000d46cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46cc:	2300      	movs	r3, #0
   d46ce:	461a      	mov	r2, r3
   d46d0:	4619      	mov	r1, r3
   d46d2:	6840      	ldr	r0, [r0, #4]
   d46d4:	f7ff bf98 	b.w	d4608 <network_on>

000d46d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46d8:	2200      	movs	r2, #0
   d46da:	4611      	mov	r1, r2
   d46dc:	6840      	ldr	r0, [r0, #4]
   d46de:	f7ff bf8b 	b.w	d45f8 <network_ready>

000d46e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46e2:	2200      	movs	r2, #0
   d46e4:	4611      	mov	r1, r2
   d46e6:	6840      	ldr	r0, [r0, #4]
   d46e8:	f7ff bf76 	b.w	d45d8 <network_connecting>

000d46ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46ec:	2200      	movs	r2, #0
   d46ee:	2102      	movs	r1, #2
   d46f0:	6840      	ldr	r0, [r0, #4]
   d46f2:	f7ff bf79 	b.w	d45e8 <network_disconnect>

000d46f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46f6:	2300      	movs	r3, #0
   d46f8:	461a      	mov	r2, r3
   d46fa:	6840      	ldr	r0, [r0, #4]
   d46fc:	f7ff bf64 	b.w	d45c8 <network_connect>

000d4700 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4700:	4b02      	ldr	r3, [pc, #8]	; (d470c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4702:	2203      	movs	r2, #3
   d4704:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4706:	4a02      	ldr	r2, [pc, #8]	; (d4710 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4708:	601a      	str	r2, [r3, #0]
   d470a:	4770      	bx	lr
   d470c:	2003e3a4 	.word	0x2003e3a4
   d4710:	000d61c8 	.word	0x000d61c8

000d4714 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4714:	4770      	bx	lr

000d4716 <_ZN8SPIClassD0Ev>:
   d4716:	b510      	push	{r4, lr}
   d4718:	210c      	movs	r1, #12
   d471a:	4604      	mov	r4, r0
   d471c:	f000 fe6c 	bl	d53f8 <_ZdlPvj>
   d4720:	4620      	mov	r0, r4
   d4722:	bd10      	pop	{r4, pc}

000d4724 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4724:	b510      	push	{r4, lr}
   d4726:	4b05      	ldr	r3, [pc, #20]	; (d473c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4728:	6003      	str	r3, [r0, #0]
   d472a:	4604      	mov	r4, r0
{
    _spi = spi;
   d472c:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d472e:	4608      	mov	r0, r1
   d4730:	f7ff fe26 	bl	d4380 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4734:	2300      	movs	r3, #0
   d4736:	60a3      	str	r3, [r4, #8]
}
   d4738:	4620      	mov	r0, r4
   d473a:	bd10      	pop	{r4, pc}
   d473c:	000d61fc 	.word	0x000d61fc

000d4740 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4740:	7900      	ldrb	r0, [r0, #4]
   d4742:	f7ff be25 	b.w	d4390 <HAL_SPI_Is_Enabled>

000d4746 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4746:	b510      	push	{r4, lr}
   d4748:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d474a:	6800      	ldr	r0, [r0, #0]
   d474c:	b118      	cbz	r0, d4756 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d474e:	f7ff ff9b 	bl	d4688 <free>
            wakeupSource_ = nullptr;
   d4752:	2300      	movs	r3, #0
   d4754:	6023      	str	r3, [r4, #0]
   d4756:	bd10      	pop	{r4, pc}

000d4758 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4758:	b510      	push	{r4, lr}
   d475a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d475c:	f7ff fff3 	bl	d4746 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4760:	4620      	mov	r0, r4
   d4762:	bd10      	pop	{r4, pc}

000d4764 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4764:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4766:	4c09      	ldr	r4, [pc, #36]	; (d478c <_GLOBAL__sub_I_System+0x28>)
   d4768:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d476a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d476e:	6020      	str	r0, [r4, #0]
   d4770:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4772:	71a0      	strb	r0, [r4, #6]
   d4774:	8120      	strh	r0, [r4, #8]
   d4776:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4778:	f7ff ff02 	bl	d4580 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d477c:	4620      	mov	r0, r4
   d477e:	4a04      	ldr	r2, [pc, #16]	; (d4790 <_GLOBAL__sub_I_System+0x2c>)
   d4780:	4904      	ldr	r1, [pc, #16]	; (d4794 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4786:	f000 be29 	b.w	d53dc <__aeabi_atexit>
   d478a:	bf00      	nop
   d478c:	2003e3ac 	.word	0x2003e3ac
   d4790:	2003e384 	.word	0x2003e384
   d4794:	000d4759 	.word	0x000d4759

000d4798 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4798:	b510      	push	{r4, lr}
   d479a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d479c:	6800      	ldr	r0, [r0, #0]
   d479e:	b108      	cbz	r0, d47a4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47a0:	f7ff fe2e 	bl	d4400 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47a4:	4620      	mov	r0, r4
   d47a6:	bd10      	pop	{r4, pc}

000d47a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47a8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47aa:	4c06      	ldr	r4, [pc, #24]	; (d47c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d47ac:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d47ae:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47b0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47b2:	f7ff fe1d 	bl	d43f0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47b6:	4620      	mov	r0, r4
   d47b8:	4a03      	ldr	r2, [pc, #12]	; (d47c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d47ba:	4904      	ldr	r1, [pc, #16]	; (d47cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47c0:	f000 be0c 	b.w	d53dc <__aeabi_atexit>
   d47c4:	2003e3b8 	.word	0x2003e3b8
   d47c8:	2003e384 	.word	0x2003e384
   d47cc:	000d4799 	.word	0x000d4799

000d47d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47d2:	4606      	mov	r6, r0
   d47d4:	460d      	mov	r5, r1
   d47d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d47d8:	2400      	movs	r4, #0
  while (size--) {
   d47da:	42bd      	cmp	r5, r7
   d47dc:	d00c      	beq.n	d47f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47de:	6833      	ldr	r3, [r6, #0]
   d47e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47e4:	689b      	ldr	r3, [r3, #8]
   d47e6:	4630      	mov	r0, r6
   d47e8:	4798      	blx	r3
     if (chunk>=0)
   d47ea:	2800      	cmp	r0, #0
   d47ec:	db01      	blt.n	d47f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d47f0:	e7f3      	b.n	d47da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47f2:	2c00      	cmp	r4, #0
   d47f4:	bf08      	it	eq
   d47f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47f8:	4620      	mov	r0, r4
   d47fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47fc:	b570      	push	{r4, r5, r6, lr}
   d47fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4800:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4802:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4804:	b149      	cbz	r1, d481a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4806:	f001 fc9d 	bl	d6144 <strlen>
   d480a:	682b      	ldr	r3, [r5, #0]
   d480c:	4602      	mov	r2, r0
   d480e:	4621      	mov	r1, r4
   d4810:	4628      	mov	r0, r5
   d4812:	68db      	ldr	r3, [r3, #12]
    }
   d4814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4818:	4718      	bx	r3
    }
   d481a:	bd70      	pop	{r4, r5, r6, pc}

000d481c <_ZN5Print5printEPKc>:
   d481c:	b508      	push	{r3, lr}
   d481e:	f7ff ffed 	bl	d47fc <_ZN5Print5writeEPKc>
   d4822:	bd08      	pop	{r3, pc}

000d4824 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4824:	6803      	ldr	r3, [r0, #0]
   d4826:	689b      	ldr	r3, [r3, #8]
   d4828:	4718      	bx	r3

000d482a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d482a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d482c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d482e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4830:	f7ff fff8 	bl	d4824 <_ZN5Print5printEc>
  n += print('\n');
   d4834:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4836:	4604      	mov	r4, r0
  n += print('\n');
   d4838:	4628      	mov	r0, r5
   d483a:	f7ff fff3 	bl	d4824 <_ZN5Print5printEc>
  return n;
}
   d483e:	4420      	add	r0, r4
   d4840:	bd38      	pop	{r3, r4, r5, pc}

000d4842 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4842:	b538      	push	{r3, r4, r5, lr}
   d4844:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4846:	f7ff ffd9 	bl	d47fc <_ZN5Print5writeEPKc>
   d484a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d484c:	4628      	mov	r0, r5
   d484e:	f7ff ffec 	bl	d482a <_ZN5Print7printlnEv>
  return n;
}
   d4852:	4420      	add	r0, r4
   d4854:	bd38      	pop	{r3, r4, r5, pc}

000d4856 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4856:	b530      	push	{r4, r5, lr}
   d4858:	b08b      	sub	sp, #44	; 0x2c
   d485a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d485c:	2100      	movs	r1, #0
   d485e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4862:	2a01      	cmp	r2, #1
   d4864:	bf98      	it	ls
   d4866:	220a      	movls	r2, #10
   d4868:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d486c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4870:	fb05 3312 	mls	r3, r5, r2, r3
   d4874:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4878:	2b09      	cmp	r3, #9
   d487a:	bf94      	ite	ls
   d487c:	3330      	addls	r3, #48	; 0x30
   d487e:	3337      	addhi	r3, #55	; 0x37
   d4880:	b2db      	uxtb	r3, r3
   d4882:	4621      	mov	r1, r4
   d4884:	f804 3901 	strb.w	r3, [r4], #-1
   d4888:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d488a:	2d00      	cmp	r5, #0
   d488c:	d1ee      	bne.n	d486c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d488e:	f7ff ffb5 	bl	d47fc <_ZN5Print5writeEPKc>
}
   d4892:	b00b      	add	sp, #44	; 0x2c
   d4894:	bd30      	pop	{r4, r5, pc}
	...

000d4898 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d489c:	ec57 6b10 	vmov	r6, r7, d0
   d48a0:	4682      	mov	sl, r0
   d48a2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d48a4:	ee10 2a10 	vmov	r2, s0
   d48a8:	463b      	mov	r3, r7
   d48aa:	ee10 0a10 	vmov	r0, s0
   d48ae:	4639      	mov	r1, r7
   d48b0:	f001 fb50 	bl	d5f54 <__aeabi_dcmpun>
   d48b4:	b108      	cbz	r0, d48ba <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48b6:	494e      	ldr	r1, [pc, #312]	; (d49f0 <_ZN5Print10printFloatEdh+0x158>)
   d48b8:	e012      	b.n	d48e0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d48ba:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d48be:	f04f 32ff 	mov.w	r2, #4294967295
   d48c2:	4b4c      	ldr	r3, [pc, #304]	; (d49f4 <_ZN5Print10printFloatEdh+0x15c>)
   d48c4:	4630      	mov	r0, r6
   d48c6:	4649      	mov	r1, r9
   d48c8:	f001 fb44 	bl	d5f54 <__aeabi_dcmpun>
   d48cc:	b968      	cbnz	r0, d48ea <_ZN5Print10printFloatEdh+0x52>
   d48ce:	f04f 32ff 	mov.w	r2, #4294967295
   d48d2:	4b48      	ldr	r3, [pc, #288]	; (d49f4 <_ZN5Print10printFloatEdh+0x15c>)
   d48d4:	4630      	mov	r0, r6
   d48d6:	4649      	mov	r1, r9
   d48d8:	f001 fb1e 	bl	d5f18 <__aeabi_dcmple>
   d48dc:	b928      	cbnz	r0, d48ea <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48de:	4946      	ldr	r1, [pc, #280]	; (d49f8 <_ZN5Print10printFloatEdh+0x160>)
   d48e0:	4650      	mov	r0, sl
   d48e2:	f7ff ff8b 	bl	d47fc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d48e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d48ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d48ee:	4b43      	ldr	r3, [pc, #268]	; (d49fc <_ZN5Print10printFloatEdh+0x164>)
   d48f0:	4630      	mov	r0, r6
   d48f2:	4639      	mov	r1, r7
   d48f4:	f001 fb24 	bl	d5f40 <__aeabi_dcmpgt>
   d48f8:	b108      	cbz	r0, d48fe <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48fa:	4941      	ldr	r1, [pc, #260]	; (d4a00 <_ZN5Print10printFloatEdh+0x168>)
   d48fc:	e7f0      	b.n	d48e0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d48fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4902:	4b40      	ldr	r3, [pc, #256]	; (d4a04 <_ZN5Print10printFloatEdh+0x16c>)
   d4904:	4630      	mov	r0, r6
   d4906:	4639      	mov	r1, r7
   d4908:	f001 fafc 	bl	d5f04 <__aeabi_dcmplt>
   d490c:	2800      	cmp	r0, #0
   d490e:	d1f4      	bne.n	d48fa <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4910:	2200      	movs	r2, #0
   d4912:	2300      	movs	r3, #0
   d4914:	4630      	mov	r0, r6
   d4916:	4639      	mov	r1, r7
   d4918:	f001 faf4 	bl	d5f04 <__aeabi_dcmplt>
   d491c:	b140      	cbz	r0, d4930 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d491e:	212d      	movs	r1, #45	; 0x2d
   d4920:	4650      	mov	r0, sl
   d4922:	f7ff ff7f 	bl	d4824 <_ZN5Print5printEc>
     number = -number;
   d4926:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d492a:	4604      	mov	r4, r0
     number = -number;
   d492c:	461f      	mov	r7, r3
   d492e:	e000      	b.n	d4932 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4930:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4932:	4935      	ldr	r1, [pc, #212]	; (d4a08 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4934:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4938:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d493a:	fa5f f388 	uxtb.w	r3, r8
   d493e:	429d      	cmp	r5, r3
   d4940:	d906      	bls.n	d4950 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4942:	2200      	movs	r2, #0
   d4944:	4b31      	ldr	r3, [pc, #196]	; (d4a0c <_ZN5Print10printFloatEdh+0x174>)
   d4946:	f001 f995 	bl	d5c74 <__aeabi_ddiv>
   d494a:	f108 0801 	add.w	r8, r8, #1
   d494e:	e7f4      	b.n	d493a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4950:	4632      	mov	r2, r6
   d4952:	463b      	mov	r3, r7
   d4954:	f000 feb2 	bl	d56bc <__adddf3>
   d4958:	460f      	mov	r7, r1
   d495a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d495c:	f001 fb38 	bl	d5fd0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4960:	220a      	movs	r2, #10
   d4962:	4601      	mov	r1, r0
   d4964:	4680      	mov	r8, r0
   d4966:	4650      	mov	r0, sl
   d4968:	f7ff ff75 	bl	d4856 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d496c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d496e:	b3e5      	cbz	r5, d49ea <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4970:	4640      	mov	r0, r8
   d4972:	f000 ffdf 	bl	d5934 <__aeabi_ui2d>
   d4976:	4602      	mov	r2, r0
   d4978:	460b      	mov	r3, r1
   d497a:	4630      	mov	r0, r6
   d497c:	4639      	mov	r1, r7
   d497e:	f000 fe9b 	bl	d56b8 <__aeabi_dsub>
   d4982:	4606      	mov	r6, r0
   d4984:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4986:	4650      	mov	r0, sl
   d4988:	4921      	ldr	r1, [pc, #132]	; (d4a10 <_ZN5Print10printFloatEdh+0x178>)
   d498a:	f7ff ff37 	bl	d47fc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d498e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4990:	2200      	movs	r2, #0
   d4992:	4b1e      	ldr	r3, [pc, #120]	; (d4a0c <_ZN5Print10printFloatEdh+0x174>)
   d4994:	4630      	mov	r0, r6
   d4996:	4639      	mov	r1, r7
   d4998:	f001 f842 	bl	d5a20 <__aeabi_dmul>
   d499c:	4606      	mov	r6, r0
   d499e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d49a0:	f001 faee 	bl	d5f80 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d49a4:	f1b0 0900 	subs.w	r9, r0, #0
   d49a8:	da07      	bge.n	d49ba <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d49aa:	212d      	movs	r1, #45	; 0x2d
   d49ac:	4650      	mov	r0, sl
   d49ae:	f7ff ff39 	bl	d4824 <_ZN5Print5printEc>
            val = -n;
   d49b2:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d49b6:	4680      	mov	r8, r0
   d49b8:	e002      	b.n	d49c0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d49ba:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d49bc:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d49c0:	220a      	movs	r2, #10
   d49c2:	4650      	mov	r0, sl
   d49c4:	f7ff ff47 	bl	d4856 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d49c8:	4440      	add	r0, r8
   d49ca:	4404      	add	r4, r0
    remainder -= toPrint;
   d49cc:	4648      	mov	r0, r9
   d49ce:	f000 ffc1 	bl	d5954 <__aeabi_i2d>
   d49d2:	4602      	mov	r2, r0
   d49d4:	460b      	mov	r3, r1
   d49d6:	4630      	mov	r0, r6
   d49d8:	4639      	mov	r1, r7
   d49da:	f000 fe6d 	bl	d56b8 <__aeabi_dsub>
   d49de:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d49e0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d49e4:	4606      	mov	r6, r0
   d49e6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d49e8:	d1d2      	bne.n	d4990 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d49ea:	4620      	mov	r0, r4
   d49ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d49f0:	000d6204 	.word	0x000d6204
   d49f4:	7fefffff 	.word	0x7fefffff
   d49f8:	000d620e 	.word	0x000d620e
   d49fc:	41efffff 	.word	0x41efffff
   d4a00:	000d6208 	.word	0x000d6208
   d4a04:	c1efffff 	.word	0xc1efffff
   d4a08:	3fe00000 	.word	0x3fe00000
   d4a0c:	40240000 	.word	0x40240000
   d4a10:	000d620c 	.word	0x000d620c

000d4a14 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d4a14:	b538      	push	{r3, r4, r5, lr}
   d4a16:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d4a18:	ee10 0a10 	vmov	r0, s0
   d4a1c:	b2cd      	uxtb	r5, r1
   d4a1e:	f000 ffab 	bl	d5978 <__aeabi_f2d>
   d4a22:	ec41 0b10 	vmov	d0, r0, r1
   d4a26:	4629      	mov	r1, r5
   d4a28:	4620      	mov	r0, r4
}
   d4a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d4a2e:	f7ff bf33 	b.w	d4898 <_ZN5Print10printFloatEdh>
	...

000d4a34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a34:	4b01      	ldr	r3, [pc, #4]	; (d4a3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a36:	4a02      	ldr	r2, [pc, #8]	; (d4a40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4a38:	601a      	str	r2, [r3, #0]
   d4a3a:	4770      	bx	lr
   d4a3c:	2003e3bc 	.word	0x2003e3bc
   d4a40:	000d6285 	.word	0x000d6285

000d4a44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4a44:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4a46:	681a      	ldr	r2, [r3, #0]
   d4a48:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4a4a:	601a      	str	r2, [r3, #0]
   d4a4c:	4770      	bx	lr
   d4a4e:	bf00      	nop
   d4a50:	2003e31c 	.word	0x2003e31c
   d4a54:	2003e3c0 	.word	0x2003e3c0

000d4a58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4a58:	2100      	movs	r1, #0
   d4a5a:	f7ff bd99 	b.w	d4590 <system_delay_ms>

000d4a5e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a5e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a60:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a62:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4a64:	b113      	cbz	r3, d4a6c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a66:	2203      	movs	r2, #3
   d4a68:	4601      	mov	r1, r0
   d4a6a:	4798      	blx	r3
    }
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	bd10      	pop	{r4, pc}

000d4a70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4a70:	b510      	push	{r4, lr}
   d4a72:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a74:	f7ff fff3 	bl	d4a5e <_ZNSt14_Function_baseD1Ev>
   d4a78:	4620      	mov	r0, r4
   d4a7a:	bd10      	pop	{r4, pc}

000d4a7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a7c:	4803      	ldr	r0, [pc, #12]	; (d4a8c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4a7e:	4a04      	ldr	r2, [pc, #16]	; (d4a90 <_GLOBAL__sub_I_RGB+0x14>)
   d4a80:	4904      	ldr	r1, [pc, #16]	; (d4a94 <_GLOBAL__sub_I_RGB+0x18>)
   d4a82:	2300      	movs	r3, #0
   d4a84:	6083      	str	r3, [r0, #8]
   d4a86:	f000 bca9 	b.w	d53dc <__aeabi_atexit>
   d4a8a:	bf00      	nop
   d4a8c:	2003e3c4 	.word	0x2003e3c4
   d4a90:	2003e384 	.word	0x2003e384
   d4a94:	000d4a71 	.word	0x000d4a71

000d4a98 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4a98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a9a:	4b0c      	ldr	r3, [pc, #48]	; (d4acc <serialEventRun+0x34>)
   d4a9c:	b133      	cbz	r3, d4aac <serialEventRun+0x14>
   d4a9e:	f000 f953 	bl	d4d48 <_Z16_fetch_usbserialv>
   d4aa2:	6803      	ldr	r3, [r0, #0]
   d4aa4:	691b      	ldr	r3, [r3, #16]
   d4aa6:	4798      	blx	r3
   d4aa8:	2800      	cmp	r0, #0
   d4aaa:	dc09      	bgt.n	d4ac0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4aac:	4b08      	ldr	r3, [pc, #32]	; (d4ad0 <serialEventRun+0x38>)
   d4aae:	b163      	cbz	r3, d4aca <serialEventRun+0x32>
   d4ab0:	f000 fa1e 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d4ab4:	6803      	ldr	r3, [r0, #0]
   d4ab6:	691b      	ldr	r3, [r3, #16]
   d4ab8:	4798      	blx	r3
   d4aba:	2800      	cmp	r0, #0
   d4abc:	dc03      	bgt.n	d4ac6 <serialEventRun+0x2e>
   d4abe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ac0:	f3af 8000 	nop.w
   d4ac4:	e7f2      	b.n	d4aac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ac6:	f3af 8000 	nop.w
   d4aca:	bd08      	pop	{r3, pc}
	...

000d4ad4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4ad4:	b508      	push	{r3, lr}
	serialEventRun();
   d4ad6:	f7ff ffdf 	bl	d4a98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ada:	f7ff fc69 	bl	d43b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ade:	4b01      	ldr	r3, [pc, #4]	; (d4ae4 <_post_loop+0x10>)
   d4ae0:	6018      	str	r0, [r3, #0]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	2003e730 	.word	0x2003e730

000d4ae8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ae8:	4802      	ldr	r0, [pc, #8]	; (d4af4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4aea:	4a03      	ldr	r2, [pc, #12]	; (d4af8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4aec:	4903      	ldr	r1, [pc, #12]	; (d4afc <_Z33system_initialize_user_backup_ramv+0x14>)
   d4aee:	1a12      	subs	r2, r2, r0
   d4af0:	f001 baec 	b.w	d60cc <memcpy>
   d4af4:	2003f400 	.word	0x2003f400
   d4af8:	2003f404 	.word	0x2003f404
   d4afc:	000d64f0 	.word	0x000d64f0

000d4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b02:	2300      	movs	r3, #0
   d4b04:	9300      	str	r3, [sp, #0]
   d4b06:	461a      	mov	r2, r3
   d4b08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b0c:	f7ff fd52 	bl	d45b4 <system_ctrl_set_result>
}
   d4b10:	b003      	add	sp, #12
   d4b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4b18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4b18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4b1a:	8843      	ldrh	r3, [r0, #2]
   d4b1c:	2b0a      	cmp	r3, #10
   d4b1e:	d008      	beq.n	d4b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4b20:	2b50      	cmp	r3, #80	; 0x50
   d4b22:	d109      	bne.n	d4b38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4b24:	4b09      	ldr	r3, [pc, #36]	; (d4b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4b26:	681b      	ldr	r3, [r3, #0]
   d4b28:	b13b      	cbz	r3, d4b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4b2a:	b003      	add	sp, #12
   d4b2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4b30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4b32:	f7ff ffe5 	bl	d4b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4b36:	e006      	b.n	d4b46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b38:	2300      	movs	r3, #0
   d4b3a:	9300      	str	r3, [sp, #0]
   d4b3c:	461a      	mov	r2, r3
   d4b3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b42:	f7ff fd37 	bl	d45b4 <system_ctrl_set_result>
        break;
    }
}
   d4b46:	b003      	add	sp, #12
   d4b48:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b4c:	2003e3d4 	.word	0x2003e3d4

000d4b50 <module_user_init_hook>:

void module_user_init_hook()
{
   d4b50:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4b52:	4c10      	ldr	r4, [pc, #64]	; (d4b94 <module_user_init_hook+0x44>)
   d4b54:	4d10      	ldr	r5, [pc, #64]	; (d4b98 <module_user_init_hook+0x48>)
   d4b56:	6823      	ldr	r3, [r4, #0]
   d4b58:	42ab      	cmp	r3, r5
   d4b5a:	4b10      	ldr	r3, [pc, #64]	; (d4b9c <module_user_init_hook+0x4c>)
   d4b5c:	bf0c      	ite	eq
   d4b5e:	2201      	moveq	r2, #1
   d4b60:	2200      	movne	r2, #0
   d4b62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4b64:	d002      	beq.n	d4b6c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4b66:	f7ff ffbf 	bl	d4ae8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4b6a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4b6c:	f7ff fc18 	bl	d43a0 <HAL_RNG_GetRandomNumber>
   d4b70:	4604      	mov	r4, r0
    srand(seed);
   d4b72:	f001 fabf 	bl	d60f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b76:	4b0a      	ldr	r3, [pc, #40]	; (d4ba0 <module_user_init_hook+0x50>)
   d4b78:	b113      	cbz	r3, d4b80 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b80:	2100      	movs	r1, #0
   d4b82:	4807      	ldr	r0, [pc, #28]	; (d4ba0 <module_user_init_hook+0x50>)
   d4b84:	f7ff fd70 	bl	d4668 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b88:	2100      	movs	r1, #0
   d4b8a:	4806      	ldr	r0, [pc, #24]	; (d4ba4 <module_user_init_hook+0x54>)
}
   d4b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b90:	f7ff bd06 	b.w	d45a0 <system_ctrl_set_app_request_handler>
   d4b94:	2003f400 	.word	0x2003f400
   d4b98:	9a271c1e 	.word	0x9a271c1e
   d4b9c:	2003e3d8 	.word	0x2003e3d8
   d4ba0:	00000000 	.word	0x00000000
   d4ba4:	000d4b19 	.word	0x000d4b19

000d4ba8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4ba8:	4770      	bx	lr

000d4baa <_ZN9IPAddressD0Ev>:
   d4baa:	b510      	push	{r4, lr}
   d4bac:	2118      	movs	r1, #24
   d4bae:	4604      	mov	r4, r0
   d4bb0:	f000 fc22 	bl	d53f8 <_ZdlPvj>
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	bd10      	pop	{r4, pc}

000d4bb8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bba:	7d03      	ldrb	r3, [r0, #20]
   d4bbc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bbe:	b08d      	sub	sp, #52	; 0x34
   d4bc0:	460e      	mov	r6, r1
   d4bc2:	f100 0704 	add.w	r7, r0, #4
   d4bc6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bca:	d002      	beq.n	d4bd2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4bcc:	f100 0508 	add.w	r5, r0, #8
   d4bd0:	e018      	b.n	d4c04 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4bd2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4bd4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4bd6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4bda:	232f      	movs	r3, #47	; 0x2f
   d4bdc:	462a      	mov	r2, r5
   d4bde:	200a      	movs	r0, #10
   d4be0:	f7ff fc16 	bl	d4410 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4be4:	4628      	mov	r0, r5
   d4be6:	f001 faad 	bl	d6144 <strlen>
   d4bea:	6833      	ldr	r3, [r6, #0]
   d4bec:	4602      	mov	r2, r0
   d4bee:	68db      	ldr	r3, [r3, #12]
   d4bf0:	4629      	mov	r1, r5
   d4bf2:	4630      	mov	r0, r6
   d4bf4:	4798      	blx	r3
   d4bf6:	e00f      	b.n	d4c18 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4bf8:	b124      	cbz	r4, d4c04 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4bfa:	212e      	movs	r1, #46	; 0x2e
   d4bfc:	4630      	mov	r0, r6
   d4bfe:	f7ff fe11 	bl	d4824 <_ZN5Print5printEc>
   d4c02:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c08:	220a      	movs	r2, #10
   d4c0a:	4630      	mov	r0, r6
   d4c0c:	f7ff fe23 	bl	d4856 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c10:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c12:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c14:	d1f0      	bne.n	d4bf8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c16:	4620      	mov	r0, r4
    }
    return n;
}
   d4c18:	b00d      	add	sp, #52	; 0x34
   d4c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c1c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	4b05      	ldr	r3, [pc, #20]	; (d4c34 <_ZN9IPAddressC1Ev+0x18>)
   d4c20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c22:	2211      	movs	r2, #17
   d4c24:	f840 3b04 	str.w	r3, [r0], #4
   d4c28:	2100      	movs	r1, #0
   d4c2a:	f001 fa5a 	bl	d60e2 <memset>
{
    clear();
}
   d4c2e:	4620      	mov	r0, r4
   d4c30:	bd10      	pop	{r4, pc}
   d4c32:	bf00      	nop
   d4c34:	000d6324 	.word	0x000d6324

000d4c38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c38:	4603      	mov	r3, r0
   d4c3a:	4a07      	ldr	r2, [pc, #28]	; (d4c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c3c:	b510      	push	{r4, lr}
   d4c3e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4c42:	f101 0210 	add.w	r2, r1, #16
   d4c46:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c4a:	f843 4b04 	str.w	r4, [r3], #4
   d4c4e:	4291      	cmp	r1, r2
   d4c50:	d1f9      	bne.n	d4c46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4c52:	780a      	ldrb	r2, [r1, #0]
   d4c54:	701a      	strb	r2, [r3, #0]
}
   d4c56:	bd10      	pop	{r4, pc}
   d4c58:	000d6324 	.word	0x000d6324

000d4c5c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4c5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4c5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4c6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4c6e:	2304      	movs	r3, #4
   d4c70:	6041      	str	r1, [r0, #4]
   d4c72:	7503      	strb	r3, [r0, #20]
   d4c74:	bd10      	pop	{r4, pc}

000d4c76 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4c78:	780d      	ldrb	r5, [r1, #0]
   d4c7a:	788b      	ldrb	r3, [r1, #2]
   d4c7c:	784a      	ldrb	r2, [r1, #1]
   d4c7e:	78c9      	ldrb	r1, [r1, #3]
   d4c80:	9100      	str	r1, [sp, #0]
   d4c82:	4629      	mov	r1, r5
   d4c84:	f7ff ffea 	bl	d4c5c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4c88:	b003      	add	sp, #12
   d4c8a:	bd30      	pop	{r4, r5, pc}

000d4c8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c8c:	7441      	strb	r1, [r0, #17]
   d4c8e:	4770      	bx	lr

000d4c90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4c90:	4770      	bx	lr

000d4c92 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4c92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4c94:	2100      	movs	r1, #0
   d4c96:	7c00      	ldrb	r0, [r0, #16]
   d4c98:	f7ff fc5a 	bl	d4550 <HAL_USB_USART_Receive_Data>
}
   d4c9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ca0:	bf28      	it	cs
   d4ca2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ca6:	bd08      	pop	{r3, pc}

000d4ca8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ca8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4caa:	2101      	movs	r1, #1
   d4cac:	7c00      	ldrb	r0, [r0, #16]
   d4cae:	f7ff fc4f 	bl	d4550 <HAL_USB_USART_Receive_Data>
}
   d4cb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4cb6:	bf28      	it	cs
   d4cb8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4cbc:	bd08      	pop	{r3, pc}

000d4cbe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4cbe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4cc0:	7c00      	ldrb	r0, [r0, #16]
   d4cc2:	f7ff fc3d 	bl	d4540 <HAL_USB_USART_Available_Data_For_Write>
}
   d4cc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cca:	bd08      	pop	{r3, pc}

000d4ccc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4ccc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4cce:	7c00      	ldrb	r0, [r0, #16]
   d4cd0:	f7ff fc2e 	bl	d4530 <HAL_USB_USART_Available_Data>
}
   d4cd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cd8:	bd08      	pop	{r3, pc}

000d4cda <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4cda:	7c00      	ldrb	r0, [r0, #16]
   d4cdc:	f7ff bc48 	b.w	d4570 <HAL_USB_USART_Flush_Data>

000d4ce0 <_ZN9USBSerialD0Ev>:
   d4ce0:	b510      	push	{r4, lr}
   d4ce2:	2114      	movs	r1, #20
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	f000 fb87 	bl	d53f8 <_ZdlPvj>
   d4cea:	4620      	mov	r0, r4
   d4cec:	bd10      	pop	{r4, pc}

000d4cee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4cee:	b538      	push	{r3, r4, r5, lr}
   d4cf0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4cf2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4cf4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4cf6:	f7ff fc23 	bl	d4540 <HAL_USB_USART_Available_Data_For_Write>
   d4cfa:	2800      	cmp	r0, #0
   d4cfc:	dc01      	bgt.n	d4d02 <_ZN9USBSerial5writeEh+0x14>
   d4cfe:	7c60      	ldrb	r0, [r4, #17]
   d4d00:	b128      	cbz	r0, d4d0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4d02:	4629      	mov	r1, r5
   d4d04:	7c20      	ldrb	r0, [r4, #16]
   d4d06:	f7ff fc2b 	bl	d4560 <HAL_USB_USART_Send_Data>
   d4d0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4d0e:	bd38      	pop	{r3, r4, r5, pc}

000d4d10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d10:	b510      	push	{r4, lr}
   d4d12:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d14:	2300      	movs	r3, #0
   d4d16:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d1c:	60a3      	str	r3, [r4, #8]
   d4d1e:	4b05      	ldr	r3, [pc, #20]	; (d4d34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4d20:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4d22:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d24:	4608      	mov	r0, r1
{
  _serial = serial;
   d4d26:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4d28:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4d2a:	4611      	mov	r1, r2
   d4d2c:	f7ff fbf8 	bl	d4520 <HAL_USB_USART_Init>
}
   d4d30:	4620      	mov	r0, r4
   d4d32:	bd10      	pop	{r4, pc}
   d4d34:	000d6338 	.word	0x000d6338

000d4d38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4d3a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4d3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4d3e:	2100      	movs	r1, #0
   d4d40:	f001 f9cf 	bl	d60e2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd10      	pop	{r4, pc}

000d4d48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4d48:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d4a:	4d0e      	ldr	r5, [pc, #56]	; (d4d84 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4d4c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4d4e:	a801      	add	r0, sp, #4
   d4d50:	f7ff fff2 	bl	d4d38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d54:	6829      	ldr	r1, [r5, #0]
   d4d56:	f011 0401 	ands.w	r4, r1, #1
   d4d5a:	d110      	bne.n	d4d7e <_Z16_fetch_usbserialv+0x36>
   d4d5c:	4628      	mov	r0, r5
   d4d5e:	f7ff f9a0 	bl	d40a2 <__cxa_guard_acquire>
   d4d62:	b160      	cbz	r0, d4d7e <_Z16_fetch_usbserialv+0x36>
   d4d64:	aa01      	add	r2, sp, #4
   d4d66:	4621      	mov	r1, r4
   d4d68:	4807      	ldr	r0, [pc, #28]	; (d4d88 <_Z16_fetch_usbserialv+0x40>)
   d4d6a:	f7ff ffd1 	bl	d4d10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4d6e:	4628      	mov	r0, r5
   d4d70:	f7ff f99c 	bl	d40ac <__cxa_guard_release>
   d4d74:	4a05      	ldr	r2, [pc, #20]	; (d4d8c <_Z16_fetch_usbserialv+0x44>)
   d4d76:	4906      	ldr	r1, [pc, #24]	; (d4d90 <_Z16_fetch_usbserialv+0x48>)
   d4d78:	4803      	ldr	r0, [pc, #12]	; (d4d88 <_Z16_fetch_usbserialv+0x40>)
   d4d7a:	f000 fb2f 	bl	d53dc <__aeabi_atexit>
	return _usbserial;
}
   d4d7e:	4802      	ldr	r0, [pc, #8]	; (d4d88 <_Z16_fetch_usbserialv+0x40>)
   d4d80:	b007      	add	sp, #28
   d4d82:	bd30      	pop	{r4, r5, pc}
   d4d84:	2003e3dc 	.word	0x2003e3dc
   d4d88:	2003e3e0 	.word	0x2003e3e0
   d4d8c:	2003e384 	.word	0x2003e384
   d4d90:	000d4c91 	.word	0x000d4c91

000d4d94 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d94:	2200      	movs	r2, #0
   d4d96:	4611      	mov	r1, r2
   d4d98:	6840      	ldr	r0, [r0, #4]
   d4d9a:	f7ff bc2d 	b.w	d45f8 <network_ready>

000d4d9e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d9e:	2200      	movs	r2, #0
   d4da0:	4611      	mov	r1, r2
   d4da2:	6840      	ldr	r0, [r0, #4]
   d4da4:	f7ff bc48 	b.w	d4638 <network_listening>

000d4da8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4da8:	2200      	movs	r2, #0
   d4daa:	4611      	mov	r1, r2
   d4dac:	6840      	ldr	r0, [r0, #4]
   d4dae:	f7ff bc53 	b.w	d4658 <network_get_listen_timeout>

000d4db2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4db2:	2200      	movs	r2, #0
   d4db4:	6840      	ldr	r0, [r0, #4]
   d4db6:	f7ff bc47 	b.w	d4648 <network_set_listen_timeout>

000d4dba <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dba:	2200      	movs	r2, #0
   d4dbc:	f081 0101 	eor.w	r1, r1, #1
   d4dc0:	6840      	ldr	r0, [r0, #4]
   d4dc2:	f7ff bc31 	b.w	d4628 <network_listen>

000d4dc6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4dc6:	2300      	movs	r3, #0
   d4dc8:	461a      	mov	r2, r3
   d4dca:	4619      	mov	r1, r3
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	f7ff bc23 	b.w	d4618 <network_off>

000d4dd2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4dd2:	2300      	movs	r3, #0
   d4dd4:	461a      	mov	r2, r3
   d4dd6:	4619      	mov	r1, r3
   d4dd8:	6840      	ldr	r0, [r0, #4]
   d4dda:	f7ff bc15 	b.w	d4608 <network_on>

000d4dde <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dde:	2200      	movs	r2, #0
   d4de0:	4611      	mov	r1, r2
   d4de2:	6840      	ldr	r0, [r0, #4]
   d4de4:	f7ff bbf8 	b.w	d45d8 <network_connecting>

000d4de8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4de8:	2200      	movs	r2, #0
   d4dea:	2102      	movs	r1, #2
   d4dec:	6840      	ldr	r0, [r0, #4]
   d4dee:	f7ff bbfb 	b.w	d45e8 <network_disconnect>

000d4df2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4df2:	2300      	movs	r3, #0
   d4df4:	461a      	mov	r2, r3
   d4df6:	6840      	ldr	r0, [r0, #4]
   d4df8:	f7ff bbe6 	b.w	d45c8 <network_connect>

000d4dfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4dfc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4dfe:	4c08      	ldr	r4, [pc, #32]	; (d4e20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4e00:	2528      	movs	r5, #40	; 0x28
   d4e02:	462a      	mov	r2, r5
   d4e04:	2100      	movs	r1, #0
   d4e06:	4620      	mov	r0, r4
   d4e08:	f001 f96b 	bl	d60e2 <memset>
        cid = -1;
   d4e0c:	f04f 33ff 	mov.w	r3, #4294967295
   d4e10:	6063      	str	r3, [r4, #4]
   d4e12:	4b04      	ldr	r3, [pc, #16]	; (d4e24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4e14:	8025      	strh	r5, [r4, #0]
   d4e16:	2204      	movs	r2, #4
   d4e18:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4e1a:	4a03      	ldr	r2, [pc, #12]	; (d4e28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4e1c:	601a      	str	r2, [r3, #0]
   d4e1e:	bd38      	pop	{r3, r4, r5, pc}
   d4e20:	2003e3fc 	.word	0x2003e3fc
   d4e24:	2003e3f4 	.word	0x2003e3f4
   d4e28:	000d6368 	.word	0x000d6368

000d4e2c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4e2c:	4770      	bx	lr

000d4e2e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e2e:	7441      	strb	r1, [r0, #17]
   d4e30:	4770      	bx	lr

000d4e32 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4e32:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4e34:	7c00      	ldrb	r0, [r0, #16]
   d4e36:	f7ff fb2b 	bl	d4490 <HAL_USART_Available_Data_For_Write>
}
   d4e3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e3e:	bd08      	pop	{r3, pc}

000d4e40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e42:	7c00      	ldrb	r0, [r0, #16]
   d4e44:	f7ff fafc 	bl	d4440 <HAL_USART_Available_Data>
}
   d4e48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e4c:	bd08      	pop	{r3, pc}

000d4e4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e50:	7c00      	ldrb	r0, [r0, #16]
   d4e52:	f7ff fb05 	bl	d4460 <HAL_USART_Peek_Data>
}
   d4e56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e5a:	bf28      	it	cs
   d4e5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e60:	bd08      	pop	{r3, pc}

000d4e62 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e62:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4e64:	7c00      	ldrb	r0, [r0, #16]
   d4e66:	f7ff faf3 	bl	d4450 <HAL_USART_Read_Data>
}
   d4e6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e6e:	bf28      	it	cs
   d4e70:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e74:	bd08      	pop	{r3, pc}

000d4e76 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4e76:	7c00      	ldrb	r0, [r0, #16]
   d4e78:	f7ff bafa 	b.w	d4470 <HAL_USART_Flush_Data>

000d4e7c <_ZN11USARTSerialD0Ev>:
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	2114      	movs	r1, #20
   d4e80:	4604      	mov	r4, r0
   d4e82:	f000 fab9 	bl	d53f8 <_ZdlPvj>
   d4e86:	4620      	mov	r0, r4
   d4e88:	bd10      	pop	{r4, pc}

000d4e8a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4e8a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e8c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4e8e:	4604      	mov	r4, r0
   d4e90:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e92:	b925      	cbnz	r5, d4e9e <_ZN11USARTSerial5writeEh+0x14>
   d4e94:	7c00      	ldrb	r0, [r0, #16]
   d4e96:	f7ff fafb 	bl	d4490 <HAL_USART_Available_Data_For_Write>
   d4e9a:	2800      	cmp	r0, #0
   d4e9c:	dd05      	ble.n	d4eaa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e9e:	4631      	mov	r1, r6
   d4ea0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ea6:	f7ff bac3 	b.w	d4430 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4eaa:	4628      	mov	r0, r5
   d4eac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4eb0:	b510      	push	{r4, lr}
   d4eb2:	4604      	mov	r4, r0
   d4eb4:	4608      	mov	r0, r1
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	2200      	movs	r2, #0
   d4eba:	6062      	str	r2, [r4, #4]
   d4ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ec0:	60a2      	str	r2, [r4, #8]
   d4ec2:	4a05      	ldr	r2, [pc, #20]	; (d4ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ec4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ec6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ec8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4eca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4ecc:	461a      	mov	r2, r3
   d4ece:	f7ff faa7 	bl	d4420 <HAL_USART_Init>
}
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	bd10      	pop	{r4, pc}
   d4ed6:	bf00      	nop
   d4ed8:	000d639c 	.word	0x000d639c

000d4edc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d4edc:	2300      	movs	r3, #0
   d4ede:	7c00      	ldrb	r0, [r0, #16]
   d4ee0:	f7ff bade 	b.w	d44a0 <HAL_USART_BeginConfig>

000d4ee4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d4ee4:	2200      	movs	r2, #0
   d4ee6:	f7ff bff9 	b.w	d4edc <_ZN11USARTSerial5beginEmm>

000d4eea <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4eea:	7c00      	ldrb	r0, [r0, #16]
   d4eec:	f7ff bac8 	b.w	d4480 <HAL_USART_Is_Enabled>

000d4ef0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4ef0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4ef2:	4d0c      	ldr	r5, [pc, #48]	; (d4f24 <_Z22__fetch_global_Serial1v+0x34>)
   d4ef4:	6829      	ldr	r1, [r5, #0]
   d4ef6:	f011 0401 	ands.w	r4, r1, #1
   d4efa:	d111      	bne.n	d4f20 <_Z22__fetch_global_Serial1v+0x30>
   d4efc:	4628      	mov	r0, r5
   d4efe:	f7ff f8d0 	bl	d40a2 <__cxa_guard_acquire>
   d4f02:	b168      	cbz	r0, d4f20 <_Z22__fetch_global_Serial1v+0x30>
   d4f04:	4a08      	ldr	r2, [pc, #32]	; (d4f28 <_Z22__fetch_global_Serial1v+0x38>)
   d4f06:	4b09      	ldr	r3, [pc, #36]	; (d4f2c <_Z22__fetch_global_Serial1v+0x3c>)
   d4f08:	4809      	ldr	r0, [pc, #36]	; (d4f30 <_Z22__fetch_global_Serial1v+0x40>)
   d4f0a:	4621      	mov	r1, r4
   d4f0c:	f7ff ffd0 	bl	d4eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4f10:	4628      	mov	r0, r5
   d4f12:	f7ff f8cb 	bl	d40ac <__cxa_guard_release>
   d4f16:	4a07      	ldr	r2, [pc, #28]	; (d4f34 <_Z22__fetch_global_Serial1v+0x44>)
   d4f18:	4907      	ldr	r1, [pc, #28]	; (d4f38 <_Z22__fetch_global_Serial1v+0x48>)
   d4f1a:	4805      	ldr	r0, [pc, #20]	; (d4f30 <_Z22__fetch_global_Serial1v+0x40>)
   d4f1c:	f000 fa5e 	bl	d53dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4f20:	4803      	ldr	r0, [pc, #12]	; (d4f30 <_Z22__fetch_global_Serial1v+0x40>)
   d4f22:	bd38      	pop	{r3, r4, r5, pc}
   d4f24:	2003e4bc 	.word	0x2003e4bc
   d4f28:	2003e4c0 	.word	0x2003e4c0
   d4f2c:	2003e438 	.word	0x2003e438
   d4f30:	2003e424 	.word	0x2003e424
   d4f34:	2003e384 	.word	0x2003e384
   d4f38:	000d4e2d 	.word	0x000d4e2d

000d4f3c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4f3c:	4770      	bx	lr

000d4f3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f40:	4606      	mov	r6, r0
   d4f42:	4615      	mov	r5, r2
   d4f44:	460c      	mov	r4, r1
   d4f46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f48:	42bc      	cmp	r4, r7
   d4f4a:	d006      	beq.n	d4f5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f4c:	6833      	ldr	r3, [r6, #0]
   d4f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f52:	689b      	ldr	r3, [r3, #8]
   d4f54:	4630      	mov	r0, r6
   d4f56:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f58:	e7f6      	b.n	d4f48 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f5a:	4628      	mov	r0, r5
   d4f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f5e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f5e:	2200      	movs	r2, #0
   d4f60:	7c00      	ldrb	r0, [r0, #16]
   d4f62:	f7ff baa5 	b.w	d44b0 <HAL_I2C_Write_Data>

000d4f66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f66:	2100      	movs	r1, #0
   d4f68:	7c00      	ldrb	r0, [r0, #16]
   d4f6a:	f7ff baa9 	b.w	d44c0 <HAL_I2C_Available_Data>

000d4f6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f6e:	2100      	movs	r1, #0
   d4f70:	7c00      	ldrb	r0, [r0, #16]
   d4f72:	f7ff baad 	b.w	d44d0 <HAL_I2C_Read_Data>

000d4f76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f76:	2100      	movs	r1, #0
   d4f78:	7c00      	ldrb	r0, [r0, #16]
   d4f7a:	f7ff bab1 	b.w	d44e0 <HAL_I2C_Peek_Data>

000d4f7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f7e:	2100      	movs	r1, #0
   d4f80:	7c00      	ldrb	r0, [r0, #16]
   d4f82:	f7ff bab5 	b.w	d44f0 <HAL_I2C_Flush_Data>

000d4f86 <_ZN7TwoWireD0Ev>:
   d4f86:	b510      	push	{r4, lr}
   d4f88:	2114      	movs	r1, #20
   d4f8a:	4604      	mov	r4, r0
   d4f8c:	f000 fa34 	bl	d53f8 <_ZdlPvj>
   d4f90:	4620      	mov	r0, r4
   d4f92:	bd10      	pop	{r4, pc}

000d4f94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4f94:	b510      	push	{r4, lr}
   d4f96:	4604      	mov	r4, r0
   d4f98:	2300      	movs	r3, #0
   d4f9a:	6063      	str	r3, [r4, #4]
   d4f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fa0:	60a3      	str	r3, [r4, #8]
   d4fa2:	4b04      	ldr	r3, [pc, #16]	; (d4fb4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4fa4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4fa6:	4608      	mov	r0, r1
   d4fa8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4faa:	4611      	mov	r1, r2
   d4fac:	f7ff fab0 	bl	d4510 <HAL_I2C_Init>
}
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	bd10      	pop	{r4, pc}
   d4fb4:	000d63cc 	.word	0x000d63cc

000d4fb8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4fb8:	2100      	movs	r1, #0
   d4fba:	7c00      	ldrb	r0, [r0, #16]
   d4fbc:	f7ff baa0 	b.w	d4500 <HAL_I2C_Is_Enabled>

000d4fc0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fc0:	2200      	movs	r2, #0
   d4fc2:	4611      	mov	r1, r2
   d4fc4:	6840      	ldr	r0, [r0, #4]
   d4fc6:	f7ff bb37 	b.w	d4638 <network_listening>

000d4fca <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fca:	2200      	movs	r2, #0
   d4fcc:	4611      	mov	r1, r2
   d4fce:	6840      	ldr	r0, [r0, #4]
   d4fd0:	f7ff bb42 	b.w	d4658 <network_get_listen_timeout>

000d4fd4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff bb36 	b.w	d4648 <network_set_listen_timeout>

000d4fdc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fdc:	2200      	movs	r2, #0
   d4fde:	f081 0101 	eor.w	r1, r1, #1
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff bb20 	b.w	d4628 <network_listen>

000d4fe8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4fe8:	2300      	movs	r3, #0
   d4fea:	461a      	mov	r2, r3
   d4fec:	2101      	movs	r1, #1
   d4fee:	6840      	ldr	r0, [r0, #4]
   d4ff0:	f7ff bb12 	b.w	d4618 <network_off>

000d4ff4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ff4:	2300      	movs	r3, #0
   d4ff6:	461a      	mov	r2, r3
   d4ff8:	4619      	mov	r1, r3
   d4ffa:	6840      	ldr	r0, [r0, #4]
   d4ffc:	f7ff bb04 	b.w	d4608 <network_on>

000d5000 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5000:	2200      	movs	r2, #0
   d5002:	4611      	mov	r1, r2
   d5004:	6840      	ldr	r0, [r0, #4]
   d5006:	f7ff baf7 	b.w	d45f8 <network_ready>

000d500a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d500a:	2200      	movs	r2, #0
   d500c:	4611      	mov	r1, r2
   d500e:	6840      	ldr	r0, [r0, #4]
   d5010:	f7ff bae2 	b.w	d45d8 <network_connecting>

000d5014 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5014:	2200      	movs	r2, #0
   d5016:	2102      	movs	r1, #2
   d5018:	6840      	ldr	r0, [r0, #4]
   d501a:	f7ff bae5 	b.w	d45e8 <network_disconnect>

000d501e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d501e:	2300      	movs	r3, #0
   d5020:	461a      	mov	r2, r3
   d5022:	6840      	ldr	r0, [r0, #4]
   d5024:	f7ff bad0 	b.w	d45c8 <network_connect>

000d5028 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5028:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d502a:	4605      	mov	r5, r0
   d502c:	b188      	cbz	r0, d5052 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d502e:	6804      	ldr	r4, [r0, #0]
   d5030:	b14c      	cbz	r4, d5046 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5032:	68a3      	ldr	r3, [r4, #8]
   d5034:	b11b      	cbz	r3, d503e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5036:	2203      	movs	r2, #3
   d5038:	4621      	mov	r1, r4
   d503a:	4620      	mov	r0, r4
   d503c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d503e:	2110      	movs	r1, #16
   d5040:	4620      	mov	r0, r4
   d5042:	f000 f9d9 	bl	d53f8 <_ZdlPvj>
   d5046:	4628      	mov	r0, r5
   d5048:	2114      	movs	r1, #20
      }
   d504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d504e:	f000 b9d3 	b.w	d53f8 <_ZdlPvj>
   d5052:	bd38      	pop	{r3, r4, r5, pc}

000d5054 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5054:	b110      	cbz	r0, d505c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5056:	6803      	ldr	r3, [r0, #0]
   d5058:	685b      	ldr	r3, [r3, #4]
   d505a:	4718      	bx	r3
   d505c:	4770      	bx	lr

000d505e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d505e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5060:	6803      	ldr	r3, [r0, #0]
   d5062:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5064:	b1bb      	cbz	r3, d5096 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5066:	6858      	ldr	r0, [r3, #4]
   d5068:	f7ff f9aa 	bl	d43c0 <os_thread_is_current>
   d506c:	b978      	cbnz	r0, d508e <_ZN6ThreadD1Ev+0x30>
   d506e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5070:	7c5a      	ldrb	r2, [r3, #17]
   d5072:	b912      	cbnz	r2, d507a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5074:	6858      	ldr	r0, [r3, #4]
   d5076:	f7ff f9ab 	bl	d43d0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d507a:	6823      	ldr	r3, [r4, #0]
   d507c:	6858      	ldr	r0, [r3, #4]
   d507e:	f7ff f9af 	bl	d43e0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5082:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5084:	2300      	movs	r3, #0
   d5086:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5088:	b128      	cbz	r0, d5096 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d508a:	f7ff ffcd 	bl	d5028 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d508e:	6820      	ldr	r0, [r4, #0]
   d5090:	b108      	cbz	r0, d5096 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5092:	f7ff ffc9 	bl	d5028 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5096:	4620      	mov	r0, r4
   d5098:	bd10      	pop	{r4, pc}

000d509a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d509a:	b538      	push	{r3, r4, r5, lr}
   d509c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d509e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d50a2:	b108      	cbz	r0, d50a8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d50a4:	f7fe fffb 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50a8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d50ac:	b108      	cbz	r0, d50b2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d50ae:	f7ff f9a7 	bl	d4400 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50b2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d50b6:	b135      	cbz	r5, d50c6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50b8:	4628      	mov	r0, r5
   d50ba:	f7ff ffd0 	bl	d505e <_ZN6ThreadD1Ev>
   d50be:	2104      	movs	r1, #4
   d50c0:	4628      	mov	r0, r5
   d50c2:	f000 f999 	bl	d53f8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50c6:	6820      	ldr	r0, [r4, #0]
   d50c8:	b108      	cbz	r0, d50ce <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d50ca:	f7ff ffc3 	bl	d5054 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50d4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4b04      	ldr	r3, [pc, #16]	; (d50e8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d50d8:	4604      	mov	r4, r0
   d50da:	f840 3b08 	str.w	r3, [r0], #8
   d50de:	f7ff ffdc 	bl	d509a <_ZN5spark11MeshPublishD1Ev>
   d50e2:	4620      	mov	r0, r4
   d50e4:	bd10      	pop	{r4, pc}
   d50e6:	bf00      	nop
   d50e8:	000d63f4 	.word	0x000d63f4

000d50ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d50ec:	b538      	push	{r3, r4, r5, lr}
   d50ee:	4c0e      	ldr	r4, [pc, #56]	; (d5128 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d50f0:	4b0e      	ldr	r3, [pc, #56]	; (d512c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d50f2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d50f4:	2500      	movs	r5, #0
   d50f6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d50f8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d50fc:	6063      	str	r3, [r4, #4]
   d50fe:	60a5      	str	r5, [r4, #8]
   d5100:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5104:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5108:	f7ff f972 	bl	d43f0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d510c:	4b08      	ldr	r3, [pc, #32]	; (d5130 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d510e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5112:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5116:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5118:	4620      	mov	r0, r4
   d511a:	4a06      	ldr	r2, [pc, #24]	; (d5134 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d511c:	4906      	ldr	r1, [pc, #24]	; (d5138 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d511e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5122:	f000 b95b 	b.w	d53dc <__aeabi_atexit>
   d5126:	bf00      	nop
   d5128:	2003e544 	.word	0x2003e544
   d512c:	000d6428 	.word	0x000d6428
   d5130:	000d63f4 	.word	0x000d63f4
   d5134:	2003e384 	.word	0x2003e384
   d5138:	000d50d5 	.word	0x000d50d5

000d513c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d513c:	2300      	movs	r3, #0
   d513e:	461a      	mov	r2, r3
   d5140:	6840      	ldr	r0, [r0, #4]
   d5142:	f7ff ba41 	b.w	d45c8 <network_connect>

000d5146 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5146:	2200      	movs	r2, #0
   d5148:	2102      	movs	r1, #2
   d514a:	6840      	ldr	r0, [r0, #4]
   d514c:	f7ff ba4c 	b.w	d45e8 <network_disconnect>

000d5150 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5150:	2200      	movs	r2, #0
   d5152:	4611      	mov	r1, r2
   d5154:	6840      	ldr	r0, [r0, #4]
   d5156:	f7ff ba3f 	b.w	d45d8 <network_connecting>

000d515a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d515a:	2200      	movs	r2, #0
   d515c:	4611      	mov	r1, r2
   d515e:	6840      	ldr	r0, [r0, #4]
   d5160:	f7ff ba4a 	b.w	d45f8 <network_ready>

000d5164 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5164:	2300      	movs	r3, #0
   d5166:	461a      	mov	r2, r3
   d5168:	4619      	mov	r1, r3
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	f7ff ba4c 	b.w	d4608 <network_on>

000d5170 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5170:	2300      	movs	r3, #0
   d5172:	461a      	mov	r2, r3
   d5174:	4619      	mov	r1, r3
   d5176:	6840      	ldr	r0, [r0, #4]
   d5178:	f7ff ba4e 	b.w	d4618 <network_off>

000d517c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d517c:	2200      	movs	r2, #0
   d517e:	f081 0101 	eor.w	r1, r1, #1
   d5182:	6840      	ldr	r0, [r0, #4]
   d5184:	f7ff ba50 	b.w	d4628 <network_listen>

000d5188 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5188:	2200      	movs	r2, #0
   d518a:	6840      	ldr	r0, [r0, #4]
   d518c:	f7ff ba5c 	b.w	d4648 <network_set_listen_timeout>

000d5190 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5190:	2200      	movs	r2, #0
   d5192:	4611      	mov	r1, r2
   d5194:	6840      	ldr	r0, [r0, #4]
   d5196:	f7ff ba5f 	b.w	d4658 <network_get_listen_timeout>

000d519a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d519a:	2200      	movs	r2, #0
   d519c:	4611      	mov	r1, r2
   d519e:	6840      	ldr	r0, [r0, #4]
   d51a0:	f7ff ba4a 	b.w	d4638 <network_listening>

000d51a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d51a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d51a8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d51aa:	b095      	sub	sp, #84	; 0x54
   d51ac:	4616      	mov	r6, r2
   d51ae:	460d      	mov	r5, r1
   d51b0:	4607      	mov	r7, r0
    IPAddress addr;
   d51b2:	f7ff fd33 	bl	d4c1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d51b6:	4621      	mov	r1, r4
   d51b8:	2220      	movs	r2, #32
   d51ba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d51bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d51be:	f000 ff90 	bl	d60e2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d51c2:	2340      	movs	r3, #64	; 0x40
   d51c4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d51c6:	4621      	mov	r1, r4
   d51c8:	466b      	mov	r3, sp
   d51ca:	aa0c      	add	r2, sp, #48	; 0x30
   d51cc:	4630      	mov	r0, r6
   d51ce:	f7ff f8af 	bl	d4330 <netdb_getaddrinfo>
    if (!r) {
   d51d2:	4604      	mov	r4, r0
   d51d4:	2800      	cmp	r0, #0
   d51d6:	d144      	bne.n	d5262 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51d8:	4602      	mov	r2, r0
   d51da:	2101      	movs	r1, #1
   d51dc:	6868      	ldr	r0, [r5, #4]
   d51de:	f7ff fa0b 	bl	d45f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51e2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d51e4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51e6:	4622      	mov	r2, r4
   d51e8:	6868      	ldr	r0, [r5, #4]
   d51ea:	f7ff fa05 	bl	d45f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51ee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d51f0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d51f2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51f4:	2e00      	cmp	r6, #0
   d51f6:	d034      	beq.n	d5262 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d51f8:	2900      	cmp	r1, #0
   d51fa:	d132      	bne.n	d5262 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d51fc:	6873      	ldr	r3, [r6, #4]
   d51fe:	2b02      	cmp	r3, #2
   d5200:	d002      	beq.n	d5208 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5202:	2b0a      	cmp	r3, #10
   d5204:	d009      	beq.n	d521a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5206:	e02a      	b.n	d525e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5208:	f1b8 0f00 	cmp.w	r8, #0
   d520c:	d027      	beq.n	d525e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d520e:	6971      	ldr	r1, [r6, #20]
   d5210:	4638      	mov	r0, r7
   d5212:	3104      	adds	r1, #4
   d5214:	f7ff fd2f 	bl	d4c76 <_ZN9IPAddressaSEPKh>
   d5218:	e020      	b.n	d525c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d521a:	f1b9 0f00 	cmp.w	r9, #0
   d521e:	d01e      	beq.n	d525e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5220:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5222:	2211      	movs	r2, #17
   d5224:	a801      	add	r0, sp, #4
   d5226:	f000 ff5c 	bl	d60e2 <memset>
                    a.v = 6;
   d522a:	2306      	movs	r3, #6
   d522c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5230:	ad01      	add	r5, sp, #4
   d5232:	f104 0308 	add.w	r3, r4, #8
   d5236:	3418      	adds	r4, #24
   d5238:	6818      	ldr	r0, [r3, #0]
   d523a:	6859      	ldr	r1, [r3, #4]
   d523c:	462a      	mov	r2, r5
   d523e:	c203      	stmia	r2!, {r0, r1}
   d5240:	3308      	adds	r3, #8
   d5242:	42a3      	cmp	r3, r4
   d5244:	4615      	mov	r5, r2
   d5246:	d1f7      	bne.n	d5238 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5248:	a901      	add	r1, sp, #4
   d524a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d524c:	ad07      	add	r5, sp, #28
   d524e:	f7ff fcf3 	bl	d4c38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5254:	1d3c      	adds	r4, r7, #4
   d5256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5258:	682b      	ldr	r3, [r5, #0]
   d525a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d525c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d525e:	69f6      	ldr	r6, [r6, #28]
   d5260:	e7c8      	b.n	d51f4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5262:	9800      	ldr	r0, [sp, #0]
   d5264:	f7ff f85c 	bl	d4320 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5268:	4638      	mov	r0, r7
   d526a:	b015      	add	sp, #84	; 0x54
   d526c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5270 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5270:	4b02      	ldr	r3, [pc, #8]	; (d527c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5272:	4a03      	ldr	r2, [pc, #12]	; (d5280 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5274:	601a      	str	r2, [r3, #0]
   d5276:	2200      	movs	r2, #0
   d5278:	605a      	str	r2, [r3, #4]
   d527a:	4770      	bx	lr
   d527c:	2003e718 	.word	0x2003e718
   d5280:	000d6428 	.word	0x000d6428

000d5284 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5284:	b510      	push	{r4, lr}
   d5286:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5288:	f000 f848 	bl	d531c <_ZN8particle7globals11instanceSpiEv>
   d528c:	f7ff fa58 	bl	d4740 <_ZN8SPIClass9isEnabledEv>
   d5290:	b128      	cbz	r0, d529e <pinAvailable+0x1a>
   d5292:	f1a4 030b 	sub.w	r3, r4, #11
   d5296:	2b02      	cmp	r3, #2
   d5298:	d801      	bhi.n	d529e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d529a:	2000      	movs	r0, #0
   d529c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d529e:	f000 f877 	bl	d5390 <_Z19__fetch_global_Wirev>
   d52a2:	f7ff fe89 	bl	d4fb8 <_ZN7TwoWire9isEnabledEv>
   d52a6:	b108      	cbz	r0, d52ac <pinAvailable+0x28>
   d52a8:	2c01      	cmp	r4, #1
   d52aa:	d9f6      	bls.n	d529a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d52ac:	f7ff fe20 	bl	d4ef0 <_Z22__fetch_global_Serial1v>
   d52b0:	f7ff fe1b 	bl	d4eea <_ZN11USARTSerial9isEnabledEv>
   d52b4:	b118      	cbz	r0, d52be <pinAvailable+0x3a>
   d52b6:	f1a4 0309 	sub.w	r3, r4, #9
   d52ba:	2b01      	cmp	r3, #1
   d52bc:	d9ed      	bls.n	d529a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d52be:	2c23      	cmp	r4, #35	; 0x23
   d52c0:	bf8c      	ite	hi
   d52c2:	2000      	movhi	r0, #0
   d52c4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d52c6:	bd10      	pop	{r4, pc}

000d52c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52c8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d52ca:	b538      	push	{r3, r4, r5, lr}
   d52cc:	4604      	mov	r4, r0
   d52ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52d0:	d80a      	bhi.n	d52e8 <pinMode+0x20>
   d52d2:	29ff      	cmp	r1, #255	; 0xff
   d52d4:	d008      	beq.n	d52e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d52d6:	f7ff ffd5 	bl	d5284 <pinAvailable>
   d52da:	b128      	cbz	r0, d52e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d52dc:	4629      	mov	r1, r5
   d52de:	4620      	mov	r0, r4
}
   d52e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d52e4:	f7ff b834 	b.w	d4350 <HAL_Pin_Mode>
   d52e8:	bd38      	pop	{r3, r4, r5, pc}

000d52ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d52ea:	b538      	push	{r3, r4, r5, lr}
   d52ec:	4604      	mov	r4, r0
   d52ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d52f0:	f7ff f836 	bl	d4360 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d52f4:	28ff      	cmp	r0, #255	; 0xff
   d52f6:	d010      	beq.n	d531a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d52f8:	2806      	cmp	r0, #6
   d52fa:	d804      	bhi.n	d5306 <digitalWrite+0x1c>
   d52fc:	234d      	movs	r3, #77	; 0x4d
   d52fe:	fa23 f000 	lsr.w	r0, r3, r0
   d5302:	07c3      	lsls	r3, r0, #31
   d5304:	d409      	bmi.n	d531a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff ffbc 	bl	d5284 <pinAvailable>
   d530c:	b128      	cbz	r0, d531a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d530e:	4629      	mov	r1, r5
   d5310:	4620      	mov	r0, r4
}
   d5312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5316:	f7ff b82b 	b.w	d4370 <HAL_GPIO_Write>
   d531a:	bd38      	pop	{r3, r4, r5, pc}

000d531c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d531c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d531e:	4d0b      	ldr	r5, [pc, #44]	; (d534c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5320:	6829      	ldr	r1, [r5, #0]
   d5322:	f011 0401 	ands.w	r4, r1, #1
   d5326:	d10f      	bne.n	d5348 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5328:	4628      	mov	r0, r5
   d532a:	f7fe feba 	bl	d40a2 <__cxa_guard_acquire>
   d532e:	b158      	cbz	r0, d5348 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5330:	4621      	mov	r1, r4
   d5332:	4807      	ldr	r0, [pc, #28]	; (d5350 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5334:	f7ff f9f6 	bl	d4724 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5338:	4628      	mov	r0, r5
   d533a:	f7fe feb7 	bl	d40ac <__cxa_guard_release>
   d533e:	4a05      	ldr	r2, [pc, #20]	; (d5354 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5340:	4905      	ldr	r1, [pc, #20]	; (d5358 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5342:	4803      	ldr	r0, [pc, #12]	; (d5350 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5344:	f000 f84a 	bl	d53dc <__aeabi_atexit>
    return instance;
}
   d5348:	4801      	ldr	r0, [pc, #4]	; (d5350 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d534a:	bd38      	pop	{r3, r4, r5, pc}
   d534c:	2003e72c 	.word	0x2003e72c
   d5350:	2003e720 	.word	0x2003e720
   d5354:	2003e384 	.word	0x2003e384
   d5358:	000d4715 	.word	0x000d4715

000d535c <_Z17acquireWireBufferv>:
   d535c:	b570      	push	{r4, r5, r6, lr}
   d535e:	4604      	mov	r4, r0
   d5360:	2514      	movs	r5, #20
   d5362:	462a      	mov	r2, r5
   d5364:	4e09      	ldr	r6, [pc, #36]	; (d538c <_Z17acquireWireBufferv+0x30>)
   d5366:	2100      	movs	r1, #0
   d5368:	f000 febb 	bl	d60e2 <memset>
   d536c:	8025      	strh	r5, [r4, #0]
   d536e:	2520      	movs	r5, #32
   d5370:	4631      	mov	r1, r6
   d5372:	60a5      	str	r5, [r4, #8]
   d5374:	6125      	str	r5, [r4, #16]
   d5376:	4628      	mov	r0, r5
   d5378:	f000 f840 	bl	d53fc <_ZnajRKSt9nothrow_t>
   d537c:	4631      	mov	r1, r6
   d537e:	6060      	str	r0, [r4, #4]
   d5380:	4628      	mov	r0, r5
   d5382:	f000 f83b 	bl	d53fc <_ZnajRKSt9nothrow_t>
   d5386:	60e0      	str	r0, [r4, #12]
   d5388:	4620      	mov	r0, r4
   d538a:	bd70      	pop	{r4, r5, r6, pc}
   d538c:	000d6454 	.word	0x000d6454

000d5390 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5390:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5392:	4d0e      	ldr	r5, [pc, #56]	; (d53cc <_Z19__fetch_global_Wirev+0x3c>)
   d5394:	6829      	ldr	r1, [r5, #0]
   d5396:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d539a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d539c:	d113      	bne.n	d53c6 <_Z19__fetch_global_Wirev+0x36>
   d539e:	4628      	mov	r0, r5
   d53a0:	f7fe fe7f 	bl	d40a2 <__cxa_guard_acquire>
   d53a4:	b178      	cbz	r0, d53c6 <_Z19__fetch_global_Wirev+0x36>
   d53a6:	a801      	add	r0, sp, #4
   d53a8:	f7ff ffd8 	bl	d535c <_Z17acquireWireBufferv>
   d53ac:	aa01      	add	r2, sp, #4
   d53ae:	4621      	mov	r1, r4
   d53b0:	4807      	ldr	r0, [pc, #28]	; (d53d0 <_Z19__fetch_global_Wirev+0x40>)
   d53b2:	f7ff fdef 	bl	d4f94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d53b6:	4628      	mov	r0, r5
   d53b8:	f7fe fe78 	bl	d40ac <__cxa_guard_release>
   d53bc:	4a05      	ldr	r2, [pc, #20]	; (d53d4 <_Z19__fetch_global_Wirev+0x44>)
   d53be:	4906      	ldr	r1, [pc, #24]	; (d53d8 <_Z19__fetch_global_Wirev+0x48>)
   d53c0:	4803      	ldr	r0, [pc, #12]	; (d53d0 <_Z19__fetch_global_Wirev+0x40>)
   d53c2:	f000 f80b 	bl	d53dc <__aeabi_atexit>
	return wire;
}
   d53c6:	4802      	ldr	r0, [pc, #8]	; (d53d0 <_Z19__fetch_global_Wirev+0x40>)
   d53c8:	b007      	add	sp, #28
   d53ca:	bd30      	pop	{r4, r5, pc}
   d53cc:	2003e734 	.word	0x2003e734
   d53d0:	2003e738 	.word	0x2003e738
   d53d4:	2003e384 	.word	0x2003e384
   d53d8:	000d4f3d 	.word	0x000d4f3d

000d53dc <__aeabi_atexit>:
   d53dc:	460b      	mov	r3, r1
   d53de:	4601      	mov	r1, r0
   d53e0:	4618      	mov	r0, r3
   d53e2:	f000 be65 	b.w	d60b0 <__cxa_atexit>
	...

000d53e8 <_ZSt15get_new_handlerv>:
   d53e8:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <_ZSt15get_new_handlerv+0xc>)
   d53ea:	6818      	ldr	r0, [r3, #0]
   d53ec:	f3bf 8f5f 	dmb	sy
   d53f0:	4770      	bx	lr
   d53f2:	bf00      	nop
   d53f4:	2003e74c 	.word	0x2003e74c

000d53f8 <_ZdlPvj>:
   d53f8:	f7fe be4f 	b.w	d409a <_ZdlPv>

000d53fc <_ZnajRKSt9nothrow_t>:
   d53fc:	f000 b800 	b.w	d5400 <_ZnwjRKSt9nothrow_t>

000d5400 <_ZnwjRKSt9nothrow_t>:
   d5400:	b510      	push	{r4, lr}
   d5402:	2800      	cmp	r0, #0
   d5404:	bf14      	ite	ne
   d5406:	4604      	movne	r4, r0
   d5408:	2401      	moveq	r4, #1
   d540a:	4620      	mov	r0, r4
   d540c:	f7ff f934 	bl	d4678 <malloc>
   d5410:	b920      	cbnz	r0, d541c <_ZnwjRKSt9nothrow_t+0x1c>
   d5412:	f7ff ffe9 	bl	d53e8 <_ZSt15get_new_handlerv>
   d5416:	b108      	cbz	r0, d541c <_ZnwjRKSt9nothrow_t+0x1c>
   d5418:	4780      	blx	r0
   d541a:	e7f6      	b.n	d540a <_ZnwjRKSt9nothrow_t+0xa>
   d541c:	bd10      	pop	{r4, pc}
	...

000d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5420:	4b18      	ldr	r3, [pc, #96]	; (d5484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d1      	lsls	r1, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4b16      	ldr	r3, [pc, #88]	; (d5488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d2      	lsls	r2, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b14      	ldr	r3, [pc, #80]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d0      	lsls	r0, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b12      	ldr	r3, [pc, #72]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d1      	lsls	r1, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b10      	ldr	r3, [pc, #64]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d2      	lsls	r2, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b0e      	ldr	r3, [pc, #56]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d0      	lsls	r0, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b0c      	ldr	r3, [pc, #48]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b0a      	ldr	r3, [pc, #40]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4770      	bx	lr
   d5482:	bf00      	nop
   d5484:	2003e76c 	.word	0x2003e76c
   d5488:	2003e768 	.word	0x2003e768
   d548c:	2003e764 	.word	0x2003e764
   d5490:	2003e760 	.word	0x2003e760
   d5494:	2003e75c 	.word	0x2003e75c
   d5498:	2003e758 	.word	0x2003e758
   d549c:	2003e754 	.word	0x2003e754
   d54a0:	2003e750 	.word	0x2003e750

000d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d54a4:	4b24      	ldr	r3, [pc, #144]	; (d5538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d0      	lsls	r0, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b22      	ldr	r3, [pc, #136]	; (d553c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d1      	lsls	r1, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b20      	ldr	r3, [pc, #128]	; (d5540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d2      	lsls	r2, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4b1e      	ldr	r3, [pc, #120]	; (d5544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d54ca:	681a      	ldr	r2, [r3, #0]
   d54cc:	07d0      	lsls	r0, r2, #31
   d54ce:	bf5c      	itt	pl
   d54d0:	2201      	movpl	r2, #1
   d54d2:	601a      	strpl	r2, [r3, #0]
   d54d4:	4b1c      	ldr	r3, [pc, #112]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d54d6:	681a      	ldr	r2, [r3, #0]
   d54d8:	07d1      	lsls	r1, r2, #31
   d54da:	bf5c      	itt	pl
   d54dc:	2201      	movpl	r2, #1
   d54de:	601a      	strpl	r2, [r3, #0]
   d54e0:	4b1a      	ldr	r3, [pc, #104]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d54e2:	681a      	ldr	r2, [r3, #0]
   d54e4:	07d2      	lsls	r2, r2, #31
   d54e6:	bf5c      	itt	pl
   d54e8:	2201      	movpl	r2, #1
   d54ea:	601a      	strpl	r2, [r3, #0]
   d54ec:	4b18      	ldr	r3, [pc, #96]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d54ee:	681a      	ldr	r2, [r3, #0]
   d54f0:	07d0      	lsls	r0, r2, #31
   d54f2:	bf5c      	itt	pl
   d54f4:	2201      	movpl	r2, #1
   d54f6:	601a      	strpl	r2, [r3, #0]
   d54f8:	4b16      	ldr	r3, [pc, #88]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d54fa:	681a      	ldr	r2, [r3, #0]
   d54fc:	07d1      	lsls	r1, r2, #31
   d54fe:	bf5c      	itt	pl
   d5500:	2201      	movpl	r2, #1
   d5502:	601a      	strpl	r2, [r3, #0]
   d5504:	4b14      	ldr	r3, [pc, #80]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5506:	681a      	ldr	r2, [r3, #0]
   d5508:	07d2      	lsls	r2, r2, #31
   d550a:	bf5c      	itt	pl
   d550c:	2201      	movpl	r2, #1
   d550e:	601a      	strpl	r2, [r3, #0]
   d5510:	4b12      	ldr	r3, [pc, #72]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5512:	681a      	ldr	r2, [r3, #0]
   d5514:	07d0      	lsls	r0, r2, #31
   d5516:	bf5c      	itt	pl
   d5518:	2201      	movpl	r2, #1
   d551a:	601a      	strpl	r2, [r3, #0]
   d551c:	4b10      	ldr	r3, [pc, #64]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d551e:	681a      	ldr	r2, [r3, #0]
   d5520:	07d1      	lsls	r1, r2, #31
   d5522:	bf5c      	itt	pl
   d5524:	2201      	movpl	r2, #1
   d5526:	601a      	strpl	r2, [r3, #0]
   d5528:	4b0e      	ldr	r3, [pc, #56]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d552a:	681a      	ldr	r2, [r3, #0]
   d552c:	07d2      	lsls	r2, r2, #31
   d552e:	bf5c      	itt	pl
   d5530:	2201      	movpl	r2, #1
   d5532:	601a      	strpl	r2, [r3, #0]
   d5534:	4770      	bx	lr
   d5536:	bf00      	nop
   d5538:	2003e79c 	.word	0x2003e79c
   d553c:	2003e798 	.word	0x2003e798
   d5540:	2003e794 	.word	0x2003e794
   d5544:	2003e790 	.word	0x2003e790
   d5548:	2003e78c 	.word	0x2003e78c
   d554c:	2003e788 	.word	0x2003e788
   d5550:	2003e784 	.word	0x2003e784
   d5554:	2003e780 	.word	0x2003e780
   d5558:	2003e77c 	.word	0x2003e77c
   d555c:	2003e778 	.word	0x2003e778
   d5560:	2003e774 	.word	0x2003e774
   d5564:	2003e770 	.word	0x2003e770

000d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5568:	4b24      	ldr	r3, [pc, #144]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d0      	lsls	r0, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b22      	ldr	r3, [pc, #136]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d1      	lsls	r1, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b20      	ldr	r3, [pc, #128]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d2      	lsls	r2, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b1e      	ldr	r3, [pc, #120]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d0      	lsls	r0, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b1c      	ldr	r3, [pc, #112]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d1      	lsls	r1, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b1a      	ldr	r3, [pc, #104]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d2      	lsls	r2, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b18      	ldr	r3, [pc, #96]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d0      	lsls	r0, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b16      	ldr	r3, [pc, #88]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d1      	lsls	r1, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b14      	ldr	r3, [pc, #80]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d2      	lsls	r2, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b12      	ldr	r3, [pc, #72]	; (d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d0      	lsls	r0, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b10      	ldr	r3, [pc, #64]	; (d5624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d1      	lsls	r1, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4b0e      	ldr	r3, [pc, #56]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	07d2      	lsls	r2, r2, #31
   d55f2:	bf5c      	itt	pl
   d55f4:	2201      	movpl	r2, #1
   d55f6:	601a      	strpl	r2, [r3, #0]
   d55f8:	4770      	bx	lr
   d55fa:	bf00      	nop
   d55fc:	2003e7cc 	.word	0x2003e7cc
   d5600:	2003e7c8 	.word	0x2003e7c8
   d5604:	2003e7c4 	.word	0x2003e7c4
   d5608:	2003e7c0 	.word	0x2003e7c0
   d560c:	2003e7bc 	.word	0x2003e7bc
   d5610:	2003e7b8 	.word	0x2003e7b8
   d5614:	2003e7b4 	.word	0x2003e7b4
   d5618:	2003e7b0 	.word	0x2003e7b0
   d561c:	2003e7ac 	.word	0x2003e7ac
   d5620:	2003e7a8 	.word	0x2003e7a8
   d5624:	2003e7a4 	.word	0x2003e7a4
   d5628:	2003e7a0 	.word	0x2003e7a0

000d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d562c:	4b18      	ldr	r3, [pc, #96]	; (d5690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d562e:	681a      	ldr	r2, [r3, #0]
   d5630:	07d1      	lsls	r1, r2, #31
   d5632:	bf5c      	itt	pl
   d5634:	2201      	movpl	r2, #1
   d5636:	601a      	strpl	r2, [r3, #0]
   d5638:	4b16      	ldr	r3, [pc, #88]	; (d5694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d563a:	681a      	ldr	r2, [r3, #0]
   d563c:	07d2      	lsls	r2, r2, #31
   d563e:	bf5c      	itt	pl
   d5640:	2201      	movpl	r2, #1
   d5642:	601a      	strpl	r2, [r3, #0]
   d5644:	4b14      	ldr	r3, [pc, #80]	; (d5698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5646:	681a      	ldr	r2, [r3, #0]
   d5648:	07d0      	lsls	r0, r2, #31
   d564a:	bf5c      	itt	pl
   d564c:	2201      	movpl	r2, #1
   d564e:	601a      	strpl	r2, [r3, #0]
   d5650:	4b12      	ldr	r3, [pc, #72]	; (d569c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5652:	681a      	ldr	r2, [r3, #0]
   d5654:	07d1      	lsls	r1, r2, #31
   d5656:	bf5c      	itt	pl
   d5658:	2201      	movpl	r2, #1
   d565a:	601a      	strpl	r2, [r3, #0]
   d565c:	4b10      	ldr	r3, [pc, #64]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d565e:	681a      	ldr	r2, [r3, #0]
   d5660:	07d2      	lsls	r2, r2, #31
   d5662:	bf5c      	itt	pl
   d5664:	2201      	movpl	r2, #1
   d5666:	601a      	strpl	r2, [r3, #0]
   d5668:	4b0e      	ldr	r3, [pc, #56]	; (d56a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d566a:	681a      	ldr	r2, [r3, #0]
   d566c:	07d0      	lsls	r0, r2, #31
   d566e:	bf5c      	itt	pl
   d5670:	2201      	movpl	r2, #1
   d5672:	601a      	strpl	r2, [r3, #0]
   d5674:	4b0c      	ldr	r3, [pc, #48]	; (d56a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5676:	681a      	ldr	r2, [r3, #0]
   d5678:	07d1      	lsls	r1, r2, #31
   d567a:	bf5c      	itt	pl
   d567c:	2201      	movpl	r2, #1
   d567e:	601a      	strpl	r2, [r3, #0]
   d5680:	4b0a      	ldr	r3, [pc, #40]	; (d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5682:	681a      	ldr	r2, [r3, #0]
   d5684:	07d2      	lsls	r2, r2, #31
   d5686:	bf5c      	itt	pl
   d5688:	2201      	movpl	r2, #1
   d568a:	601a      	strpl	r2, [r3, #0]
   d568c:	4770      	bx	lr
   d568e:	bf00      	nop
   d5690:	2003e7ec 	.word	0x2003e7ec
   d5694:	2003e7e8 	.word	0x2003e7e8
   d5698:	2003e7e4 	.word	0x2003e7e4
   d569c:	2003e7e0 	.word	0x2003e7e0
   d56a0:	2003e7dc 	.word	0x2003e7dc
   d56a4:	2003e7d8 	.word	0x2003e7d8
   d56a8:	2003e7d4 	.word	0x2003e7d4
   d56ac:	2003e7d0 	.word	0x2003e7d0

000d56b0 <__aeabi_drsub>:
   d56b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d56b4:	e002      	b.n	d56bc <__adddf3>
   d56b6:	bf00      	nop

000d56b8 <__aeabi_dsub>:
   d56b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d56bc <__adddf3>:
   d56bc:	b530      	push	{r4, r5, lr}
   d56be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d56c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d56c6:	ea94 0f05 	teq	r4, r5
   d56ca:	bf08      	it	eq
   d56cc:	ea90 0f02 	teqeq	r0, r2
   d56d0:	bf1f      	itttt	ne
   d56d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d56d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d56da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d56de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d56e2:	f000 80e2 	beq.w	d58aa <__adddf3+0x1ee>
   d56e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d56ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d56ee:	bfb8      	it	lt
   d56f0:	426d      	neglt	r5, r5
   d56f2:	dd0c      	ble.n	d570e <__adddf3+0x52>
   d56f4:	442c      	add	r4, r5
   d56f6:	ea80 0202 	eor.w	r2, r0, r2
   d56fa:	ea81 0303 	eor.w	r3, r1, r3
   d56fe:	ea82 0000 	eor.w	r0, r2, r0
   d5702:	ea83 0101 	eor.w	r1, r3, r1
   d5706:	ea80 0202 	eor.w	r2, r0, r2
   d570a:	ea81 0303 	eor.w	r3, r1, r3
   d570e:	2d36      	cmp	r5, #54	; 0x36
   d5710:	bf88      	it	hi
   d5712:	bd30      	pophi	{r4, r5, pc}
   d5714:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5718:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d571c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5720:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5724:	d002      	beq.n	d572c <__adddf3+0x70>
   d5726:	4240      	negs	r0, r0
   d5728:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d572c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5730:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5734:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5738:	d002      	beq.n	d5740 <__adddf3+0x84>
   d573a:	4252      	negs	r2, r2
   d573c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5740:	ea94 0f05 	teq	r4, r5
   d5744:	f000 80a7 	beq.w	d5896 <__adddf3+0x1da>
   d5748:	f1a4 0401 	sub.w	r4, r4, #1
   d574c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5750:	db0d      	blt.n	d576e <__adddf3+0xb2>
   d5752:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5756:	fa22 f205 	lsr.w	r2, r2, r5
   d575a:	1880      	adds	r0, r0, r2
   d575c:	f141 0100 	adc.w	r1, r1, #0
   d5760:	fa03 f20e 	lsl.w	r2, r3, lr
   d5764:	1880      	adds	r0, r0, r2
   d5766:	fa43 f305 	asr.w	r3, r3, r5
   d576a:	4159      	adcs	r1, r3
   d576c:	e00e      	b.n	d578c <__adddf3+0xd0>
   d576e:	f1a5 0520 	sub.w	r5, r5, #32
   d5772:	f10e 0e20 	add.w	lr, lr, #32
   d5776:	2a01      	cmp	r2, #1
   d5778:	fa03 fc0e 	lsl.w	ip, r3, lr
   d577c:	bf28      	it	cs
   d577e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5782:	fa43 f305 	asr.w	r3, r3, r5
   d5786:	18c0      	adds	r0, r0, r3
   d5788:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d578c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5790:	d507      	bpl.n	d57a2 <__adddf3+0xe6>
   d5792:	f04f 0e00 	mov.w	lr, #0
   d5796:	f1dc 0c00 	rsbs	ip, ip, #0
   d579a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d579e:	eb6e 0101 	sbc.w	r1, lr, r1
   d57a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d57a6:	d31b      	bcc.n	d57e0 <__adddf3+0x124>
   d57a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d57ac:	d30c      	bcc.n	d57c8 <__adddf3+0x10c>
   d57ae:	0849      	lsrs	r1, r1, #1
   d57b0:	ea5f 0030 	movs.w	r0, r0, rrx
   d57b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d57b8:	f104 0401 	add.w	r4, r4, #1
   d57bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d57c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d57c4:	f080 809a 	bcs.w	d58fc <__adddf3+0x240>
   d57c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d57cc:	bf08      	it	eq
   d57ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d57d2:	f150 0000 	adcs.w	r0, r0, #0
   d57d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d57da:	ea41 0105 	orr.w	r1, r1, r5
   d57de:	bd30      	pop	{r4, r5, pc}
   d57e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d57e4:	4140      	adcs	r0, r0
   d57e6:	eb41 0101 	adc.w	r1, r1, r1
   d57ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d57ee:	f1a4 0401 	sub.w	r4, r4, #1
   d57f2:	d1e9      	bne.n	d57c8 <__adddf3+0x10c>
   d57f4:	f091 0f00 	teq	r1, #0
   d57f8:	bf04      	itt	eq
   d57fa:	4601      	moveq	r1, r0
   d57fc:	2000      	moveq	r0, #0
   d57fe:	fab1 f381 	clz	r3, r1
   d5802:	bf08      	it	eq
   d5804:	3320      	addeq	r3, #32
   d5806:	f1a3 030b 	sub.w	r3, r3, #11
   d580a:	f1b3 0220 	subs.w	r2, r3, #32
   d580e:	da0c      	bge.n	d582a <__adddf3+0x16e>
   d5810:	320c      	adds	r2, #12
   d5812:	dd08      	ble.n	d5826 <__adddf3+0x16a>
   d5814:	f102 0c14 	add.w	ip, r2, #20
   d5818:	f1c2 020c 	rsb	r2, r2, #12
   d581c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5820:	fa21 f102 	lsr.w	r1, r1, r2
   d5824:	e00c      	b.n	d5840 <__adddf3+0x184>
   d5826:	f102 0214 	add.w	r2, r2, #20
   d582a:	bfd8      	it	le
   d582c:	f1c2 0c20 	rsble	ip, r2, #32
   d5830:	fa01 f102 	lsl.w	r1, r1, r2
   d5834:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5838:	bfdc      	itt	le
   d583a:	ea41 010c 	orrle.w	r1, r1, ip
   d583e:	4090      	lslle	r0, r2
   d5840:	1ae4      	subs	r4, r4, r3
   d5842:	bfa2      	ittt	ge
   d5844:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5848:	4329      	orrge	r1, r5
   d584a:	bd30      	popge	{r4, r5, pc}
   d584c:	ea6f 0404 	mvn.w	r4, r4
   d5850:	3c1f      	subs	r4, #31
   d5852:	da1c      	bge.n	d588e <__adddf3+0x1d2>
   d5854:	340c      	adds	r4, #12
   d5856:	dc0e      	bgt.n	d5876 <__adddf3+0x1ba>
   d5858:	f104 0414 	add.w	r4, r4, #20
   d585c:	f1c4 0220 	rsb	r2, r4, #32
   d5860:	fa20 f004 	lsr.w	r0, r0, r4
   d5864:	fa01 f302 	lsl.w	r3, r1, r2
   d5868:	ea40 0003 	orr.w	r0, r0, r3
   d586c:	fa21 f304 	lsr.w	r3, r1, r4
   d5870:	ea45 0103 	orr.w	r1, r5, r3
   d5874:	bd30      	pop	{r4, r5, pc}
   d5876:	f1c4 040c 	rsb	r4, r4, #12
   d587a:	f1c4 0220 	rsb	r2, r4, #32
   d587e:	fa20 f002 	lsr.w	r0, r0, r2
   d5882:	fa01 f304 	lsl.w	r3, r1, r4
   d5886:	ea40 0003 	orr.w	r0, r0, r3
   d588a:	4629      	mov	r1, r5
   d588c:	bd30      	pop	{r4, r5, pc}
   d588e:	fa21 f004 	lsr.w	r0, r1, r4
   d5892:	4629      	mov	r1, r5
   d5894:	bd30      	pop	{r4, r5, pc}
   d5896:	f094 0f00 	teq	r4, #0
   d589a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d589e:	bf06      	itte	eq
   d58a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d58a4:	3401      	addeq	r4, #1
   d58a6:	3d01      	subne	r5, #1
   d58a8:	e74e      	b.n	d5748 <__adddf3+0x8c>
   d58aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d58ae:	bf18      	it	ne
   d58b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d58b4:	d029      	beq.n	d590a <__adddf3+0x24e>
   d58b6:	ea94 0f05 	teq	r4, r5
   d58ba:	bf08      	it	eq
   d58bc:	ea90 0f02 	teqeq	r0, r2
   d58c0:	d005      	beq.n	d58ce <__adddf3+0x212>
   d58c2:	ea54 0c00 	orrs.w	ip, r4, r0
   d58c6:	bf04      	itt	eq
   d58c8:	4619      	moveq	r1, r3
   d58ca:	4610      	moveq	r0, r2
   d58cc:	bd30      	pop	{r4, r5, pc}
   d58ce:	ea91 0f03 	teq	r1, r3
   d58d2:	bf1e      	ittt	ne
   d58d4:	2100      	movne	r1, #0
   d58d6:	2000      	movne	r0, #0
   d58d8:	bd30      	popne	{r4, r5, pc}
   d58da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d58de:	d105      	bne.n	d58ec <__adddf3+0x230>
   d58e0:	0040      	lsls	r0, r0, #1
   d58e2:	4149      	adcs	r1, r1
   d58e4:	bf28      	it	cs
   d58e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d58ea:	bd30      	pop	{r4, r5, pc}
   d58ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d58f0:	bf3c      	itt	cc
   d58f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d58f6:	bd30      	popcc	{r4, r5, pc}
   d58f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5900:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5904:	f04f 0000 	mov.w	r0, #0
   d5908:	bd30      	pop	{r4, r5, pc}
   d590a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d590e:	bf1a      	itte	ne
   d5910:	4619      	movne	r1, r3
   d5912:	4610      	movne	r0, r2
   d5914:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5918:	bf1c      	itt	ne
   d591a:	460b      	movne	r3, r1
   d591c:	4602      	movne	r2, r0
   d591e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5922:	bf06      	itte	eq
   d5924:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5928:	ea91 0f03 	teqeq	r1, r3
   d592c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5930:	bd30      	pop	{r4, r5, pc}
   d5932:	bf00      	nop

000d5934 <__aeabi_ui2d>:
   d5934:	f090 0f00 	teq	r0, #0
   d5938:	bf04      	itt	eq
   d593a:	2100      	moveq	r1, #0
   d593c:	4770      	bxeq	lr
   d593e:	b530      	push	{r4, r5, lr}
   d5940:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5944:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5948:	f04f 0500 	mov.w	r5, #0
   d594c:	f04f 0100 	mov.w	r1, #0
   d5950:	e750      	b.n	d57f4 <__adddf3+0x138>
   d5952:	bf00      	nop

000d5954 <__aeabi_i2d>:
   d5954:	f090 0f00 	teq	r0, #0
   d5958:	bf04      	itt	eq
   d595a:	2100      	moveq	r1, #0
   d595c:	4770      	bxeq	lr
   d595e:	b530      	push	{r4, r5, lr}
   d5960:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5964:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5968:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d596c:	bf48      	it	mi
   d596e:	4240      	negmi	r0, r0
   d5970:	f04f 0100 	mov.w	r1, #0
   d5974:	e73e      	b.n	d57f4 <__adddf3+0x138>
   d5976:	bf00      	nop

000d5978 <__aeabi_f2d>:
   d5978:	0042      	lsls	r2, r0, #1
   d597a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d597e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5982:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5986:	bf1f      	itttt	ne
   d5988:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d598c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5990:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5994:	4770      	bxne	lr
   d5996:	f092 0f00 	teq	r2, #0
   d599a:	bf14      	ite	ne
   d599c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d59a0:	4770      	bxeq	lr
   d59a2:	b530      	push	{r4, r5, lr}
   d59a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d59a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d59b0:	e720      	b.n	d57f4 <__adddf3+0x138>
   d59b2:	bf00      	nop

000d59b4 <__aeabi_ul2d>:
   d59b4:	ea50 0201 	orrs.w	r2, r0, r1
   d59b8:	bf08      	it	eq
   d59ba:	4770      	bxeq	lr
   d59bc:	b530      	push	{r4, r5, lr}
   d59be:	f04f 0500 	mov.w	r5, #0
   d59c2:	e00a      	b.n	d59da <__aeabi_l2d+0x16>

000d59c4 <__aeabi_l2d>:
   d59c4:	ea50 0201 	orrs.w	r2, r0, r1
   d59c8:	bf08      	it	eq
   d59ca:	4770      	bxeq	lr
   d59cc:	b530      	push	{r4, r5, lr}
   d59ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d59d2:	d502      	bpl.n	d59da <__aeabi_l2d+0x16>
   d59d4:	4240      	negs	r0, r0
   d59d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d59da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d59e6:	f43f aedc 	beq.w	d57a2 <__adddf3+0xe6>
   d59ea:	f04f 0203 	mov.w	r2, #3
   d59ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d59f2:	bf18      	it	ne
   d59f4:	3203      	addne	r2, #3
   d59f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d59fa:	bf18      	it	ne
   d59fc:	3203      	addne	r2, #3
   d59fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5a02:	f1c2 0320 	rsb	r3, r2, #32
   d5a06:	fa00 fc03 	lsl.w	ip, r0, r3
   d5a0a:	fa20 f002 	lsr.w	r0, r0, r2
   d5a0e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5a12:	ea40 000e 	orr.w	r0, r0, lr
   d5a16:	fa21 f102 	lsr.w	r1, r1, r2
   d5a1a:	4414      	add	r4, r2
   d5a1c:	e6c1      	b.n	d57a2 <__adddf3+0xe6>
   d5a1e:	bf00      	nop

000d5a20 <__aeabi_dmul>:
   d5a20:	b570      	push	{r4, r5, r6, lr}
   d5a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5a2e:	bf1d      	ittte	ne
   d5a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5a34:	ea94 0f0c 	teqne	r4, ip
   d5a38:	ea95 0f0c 	teqne	r5, ip
   d5a3c:	f000 f8de 	bleq	d5bfc <__aeabi_dmul+0x1dc>
   d5a40:	442c      	add	r4, r5
   d5a42:	ea81 0603 	eor.w	r6, r1, r3
   d5a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5a52:	bf18      	it	ne
   d5a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5a60:	d038      	beq.n	d5ad4 <__aeabi_dmul+0xb4>
   d5a62:	fba0 ce02 	umull	ip, lr, r0, r2
   d5a66:	f04f 0500 	mov.w	r5, #0
   d5a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5a72:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5a76:	f04f 0600 	mov.w	r6, #0
   d5a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5a7e:	f09c 0f00 	teq	ip, #0
   d5a82:	bf18      	it	ne
   d5a84:	f04e 0e01 	orrne.w	lr, lr, #1
   d5a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5a94:	d204      	bcs.n	d5aa0 <__aeabi_dmul+0x80>
   d5a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5a9a:	416d      	adcs	r5, r5
   d5a9c:	eb46 0606 	adc.w	r6, r6, r6
   d5aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ab8:	bf88      	it	hi
   d5aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5abe:	d81e      	bhi.n	d5afe <__aeabi_dmul+0xde>
   d5ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5ac4:	bf08      	it	eq
   d5ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5aca:	f150 0000 	adcs.w	r0, r0, #0
   d5ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ad2:	bd70      	pop	{r4, r5, r6, pc}
   d5ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5ad8:	ea46 0101 	orr.w	r1, r6, r1
   d5adc:	ea40 0002 	orr.w	r0, r0, r2
   d5ae0:	ea81 0103 	eor.w	r1, r1, r3
   d5ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5ae8:	bfc2      	ittt	gt
   d5aea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5af2:	bd70      	popgt	{r4, r5, r6, pc}
   d5af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5af8:	f04f 0e00 	mov.w	lr, #0
   d5afc:	3c01      	subs	r4, #1
   d5afe:	f300 80ab 	bgt.w	d5c58 <__aeabi_dmul+0x238>
   d5b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5b06:	bfde      	ittt	le
   d5b08:	2000      	movle	r0, #0
   d5b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5b0e:	bd70      	pople	{r4, r5, r6, pc}
   d5b10:	f1c4 0400 	rsb	r4, r4, #0
   d5b14:	3c20      	subs	r4, #32
   d5b16:	da35      	bge.n	d5b84 <__aeabi_dmul+0x164>
   d5b18:	340c      	adds	r4, #12
   d5b1a:	dc1b      	bgt.n	d5b54 <__aeabi_dmul+0x134>
   d5b1c:	f104 0414 	add.w	r4, r4, #20
   d5b20:	f1c4 0520 	rsb	r5, r4, #32
   d5b24:	fa00 f305 	lsl.w	r3, r0, r5
   d5b28:	fa20 f004 	lsr.w	r0, r0, r4
   d5b2c:	fa01 f205 	lsl.w	r2, r1, r5
   d5b30:	ea40 0002 	orr.w	r0, r0, r2
   d5b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5b40:	fa21 f604 	lsr.w	r6, r1, r4
   d5b44:	eb42 0106 	adc.w	r1, r2, r6
   d5b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b4c:	bf08      	it	eq
   d5b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b52:	bd70      	pop	{r4, r5, r6, pc}
   d5b54:	f1c4 040c 	rsb	r4, r4, #12
   d5b58:	f1c4 0520 	rsb	r5, r4, #32
   d5b5c:	fa00 f304 	lsl.w	r3, r0, r4
   d5b60:	fa20 f005 	lsr.w	r0, r0, r5
   d5b64:	fa01 f204 	lsl.w	r2, r1, r4
   d5b68:	ea40 0002 	orr.w	r0, r0, r2
   d5b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5b74:	f141 0100 	adc.w	r1, r1, #0
   d5b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b7c:	bf08      	it	eq
   d5b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b82:	bd70      	pop	{r4, r5, r6, pc}
   d5b84:	f1c4 0520 	rsb	r5, r4, #32
   d5b88:	fa00 f205 	lsl.w	r2, r0, r5
   d5b8c:	ea4e 0e02 	orr.w	lr, lr, r2
   d5b90:	fa20 f304 	lsr.w	r3, r0, r4
   d5b94:	fa01 f205 	lsl.w	r2, r1, r5
   d5b98:	ea43 0302 	orr.w	r3, r3, r2
   d5b9c:	fa21 f004 	lsr.w	r0, r1, r4
   d5ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ba4:	fa21 f204 	lsr.w	r2, r1, r4
   d5ba8:	ea20 0002 	bic.w	r0, r0, r2
   d5bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5bb4:	bf08      	it	eq
   d5bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bba:	bd70      	pop	{r4, r5, r6, pc}
   d5bbc:	f094 0f00 	teq	r4, #0
   d5bc0:	d10f      	bne.n	d5be2 <__aeabi_dmul+0x1c2>
   d5bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5bc6:	0040      	lsls	r0, r0, #1
   d5bc8:	eb41 0101 	adc.w	r1, r1, r1
   d5bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5bd0:	bf08      	it	eq
   d5bd2:	3c01      	subeq	r4, #1
   d5bd4:	d0f7      	beq.n	d5bc6 <__aeabi_dmul+0x1a6>
   d5bd6:	ea41 0106 	orr.w	r1, r1, r6
   d5bda:	f095 0f00 	teq	r5, #0
   d5bde:	bf18      	it	ne
   d5be0:	4770      	bxne	lr
   d5be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5be6:	0052      	lsls	r2, r2, #1
   d5be8:	eb43 0303 	adc.w	r3, r3, r3
   d5bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5bf0:	bf08      	it	eq
   d5bf2:	3d01      	subeq	r5, #1
   d5bf4:	d0f7      	beq.n	d5be6 <__aeabi_dmul+0x1c6>
   d5bf6:	ea43 0306 	orr.w	r3, r3, r6
   d5bfa:	4770      	bx	lr
   d5bfc:	ea94 0f0c 	teq	r4, ip
   d5c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5c04:	bf18      	it	ne
   d5c06:	ea95 0f0c 	teqne	r5, ip
   d5c0a:	d00c      	beq.n	d5c26 <__aeabi_dmul+0x206>
   d5c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c10:	bf18      	it	ne
   d5c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c16:	d1d1      	bne.n	d5bbc <__aeabi_dmul+0x19c>
   d5c18:	ea81 0103 	eor.w	r1, r1, r3
   d5c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c20:	f04f 0000 	mov.w	r0, #0
   d5c24:	bd70      	pop	{r4, r5, r6, pc}
   d5c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c2a:	bf06      	itte	eq
   d5c2c:	4610      	moveq	r0, r2
   d5c2e:	4619      	moveq	r1, r3
   d5c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c34:	d019      	beq.n	d5c6a <__aeabi_dmul+0x24a>
   d5c36:	ea94 0f0c 	teq	r4, ip
   d5c3a:	d102      	bne.n	d5c42 <__aeabi_dmul+0x222>
   d5c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5c40:	d113      	bne.n	d5c6a <__aeabi_dmul+0x24a>
   d5c42:	ea95 0f0c 	teq	r5, ip
   d5c46:	d105      	bne.n	d5c54 <__aeabi_dmul+0x234>
   d5c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5c4c:	bf1c      	itt	ne
   d5c4e:	4610      	movne	r0, r2
   d5c50:	4619      	movne	r1, r3
   d5c52:	d10a      	bne.n	d5c6a <__aeabi_dmul+0x24a>
   d5c54:	ea81 0103 	eor.w	r1, r1, r3
   d5c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5c64:	f04f 0000 	mov.w	r0, #0
   d5c68:	bd70      	pop	{r4, r5, r6, pc}
   d5c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5c72:	bd70      	pop	{r4, r5, r6, pc}

000d5c74 <__aeabi_ddiv>:
   d5c74:	b570      	push	{r4, r5, r6, lr}
   d5c76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c82:	bf1d      	ittte	ne
   d5c84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c88:	ea94 0f0c 	teqne	r4, ip
   d5c8c:	ea95 0f0c 	teqne	r5, ip
   d5c90:	f000 f8a7 	bleq	d5de2 <__aeabi_ddiv+0x16e>
   d5c94:	eba4 0405 	sub.w	r4, r4, r5
   d5c98:	ea81 0e03 	eor.w	lr, r1, r3
   d5c9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ca4:	f000 8088 	beq.w	d5db8 <__aeabi_ddiv+0x144>
   d5ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5cac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5cb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5cb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5cb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5cbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5cc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5cc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5cc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5ccc:	429d      	cmp	r5, r3
   d5cce:	bf08      	it	eq
   d5cd0:	4296      	cmpeq	r6, r2
   d5cd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5cd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5cda:	d202      	bcs.n	d5ce2 <__aeabi_ddiv+0x6e>
   d5cdc:	085b      	lsrs	r3, r3, #1
   d5cde:	ea4f 0232 	mov.w	r2, r2, rrx
   d5ce2:	1ab6      	subs	r6, r6, r2
   d5ce4:	eb65 0503 	sbc.w	r5, r5, r3
   d5ce8:	085b      	lsrs	r3, r3, #1
   d5cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5cf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5cf6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cfe:	bf22      	ittt	cs
   d5d00:	1ab6      	subcs	r6, r6, r2
   d5d02:	4675      	movcs	r5, lr
   d5d04:	ea40 000c 	orrcs.w	r0, r0, ip
   d5d08:	085b      	lsrs	r3, r3, #1
   d5d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d16:	bf22      	ittt	cs
   d5d18:	1ab6      	subcs	r6, r6, r2
   d5d1a:	4675      	movcs	r5, lr
   d5d1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5d20:	085b      	lsrs	r3, r3, #1
   d5d22:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d26:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d2e:	bf22      	ittt	cs
   d5d30:	1ab6      	subcs	r6, r6, r2
   d5d32:	4675      	movcs	r5, lr
   d5d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5d38:	085b      	lsrs	r3, r3, #1
   d5d3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5d42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5d46:	bf22      	ittt	cs
   d5d48:	1ab6      	subcs	r6, r6, r2
   d5d4a:	4675      	movcs	r5, lr
   d5d4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5d50:	ea55 0e06 	orrs.w	lr, r5, r6
   d5d54:	d018      	beq.n	d5d88 <__aeabi_ddiv+0x114>
   d5d56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5d5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5d5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5d66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5d6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5d6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5d72:	d1c0      	bne.n	d5cf6 <__aeabi_ddiv+0x82>
   d5d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d78:	d10b      	bne.n	d5d92 <__aeabi_ddiv+0x11e>
   d5d7a:	ea41 0100 	orr.w	r1, r1, r0
   d5d7e:	f04f 0000 	mov.w	r0, #0
   d5d82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5d86:	e7b6      	b.n	d5cf6 <__aeabi_ddiv+0x82>
   d5d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d8c:	bf04      	itt	eq
   d5d8e:	4301      	orreq	r1, r0
   d5d90:	2000      	moveq	r0, #0
   d5d92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5d96:	bf88      	it	hi
   d5d98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5d9c:	f63f aeaf 	bhi.w	d5afe <__aeabi_dmul+0xde>
   d5da0:	ebb5 0c03 	subs.w	ip, r5, r3
   d5da4:	bf04      	itt	eq
   d5da6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5dae:	f150 0000 	adcs.w	r0, r0, #0
   d5db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5db6:	bd70      	pop	{r4, r5, r6, pc}
   d5db8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5dbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5dc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5dc4:	bfc2      	ittt	gt
   d5dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5dce:	bd70      	popgt	{r4, r5, r6, pc}
   d5dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5dd4:	f04f 0e00 	mov.w	lr, #0
   d5dd8:	3c01      	subs	r4, #1
   d5dda:	e690      	b.n	d5afe <__aeabi_dmul+0xde>
   d5ddc:	ea45 0e06 	orr.w	lr, r5, r6
   d5de0:	e68d      	b.n	d5afe <__aeabi_dmul+0xde>
   d5de2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5de6:	ea94 0f0c 	teq	r4, ip
   d5dea:	bf08      	it	eq
   d5dec:	ea95 0f0c 	teqeq	r5, ip
   d5df0:	f43f af3b 	beq.w	d5c6a <__aeabi_dmul+0x24a>
   d5df4:	ea94 0f0c 	teq	r4, ip
   d5df8:	d10a      	bne.n	d5e10 <__aeabi_ddiv+0x19c>
   d5dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5dfe:	f47f af34 	bne.w	d5c6a <__aeabi_dmul+0x24a>
   d5e02:	ea95 0f0c 	teq	r5, ip
   d5e06:	f47f af25 	bne.w	d5c54 <__aeabi_dmul+0x234>
   d5e0a:	4610      	mov	r0, r2
   d5e0c:	4619      	mov	r1, r3
   d5e0e:	e72c      	b.n	d5c6a <__aeabi_dmul+0x24a>
   d5e10:	ea95 0f0c 	teq	r5, ip
   d5e14:	d106      	bne.n	d5e24 <__aeabi_ddiv+0x1b0>
   d5e16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e1a:	f43f aefd 	beq.w	d5c18 <__aeabi_dmul+0x1f8>
   d5e1e:	4610      	mov	r0, r2
   d5e20:	4619      	mov	r1, r3
   d5e22:	e722      	b.n	d5c6a <__aeabi_dmul+0x24a>
   d5e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e28:	bf18      	it	ne
   d5e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e2e:	f47f aec5 	bne.w	d5bbc <__aeabi_dmul+0x19c>
   d5e32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5e36:	f47f af0d 	bne.w	d5c54 <__aeabi_dmul+0x234>
   d5e3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5e3e:	f47f aeeb 	bne.w	d5c18 <__aeabi_dmul+0x1f8>
   d5e42:	e712      	b.n	d5c6a <__aeabi_dmul+0x24a>

000d5e44 <__gedf2>:
   d5e44:	f04f 3cff 	mov.w	ip, #4294967295
   d5e48:	e006      	b.n	d5e58 <__cmpdf2+0x4>
   d5e4a:	bf00      	nop

000d5e4c <__ledf2>:
   d5e4c:	f04f 0c01 	mov.w	ip, #1
   d5e50:	e002      	b.n	d5e58 <__cmpdf2+0x4>
   d5e52:	bf00      	nop

000d5e54 <__cmpdf2>:
   d5e54:	f04f 0c01 	mov.w	ip, #1
   d5e58:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e68:	bf18      	it	ne
   d5e6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5e6e:	d01b      	beq.n	d5ea8 <__cmpdf2+0x54>
   d5e70:	b001      	add	sp, #4
   d5e72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5e76:	bf0c      	ite	eq
   d5e78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5e7c:	ea91 0f03 	teqne	r1, r3
   d5e80:	bf02      	ittt	eq
   d5e82:	ea90 0f02 	teqeq	r0, r2
   d5e86:	2000      	moveq	r0, #0
   d5e88:	4770      	bxeq	lr
   d5e8a:	f110 0f00 	cmn.w	r0, #0
   d5e8e:	ea91 0f03 	teq	r1, r3
   d5e92:	bf58      	it	pl
   d5e94:	4299      	cmppl	r1, r3
   d5e96:	bf08      	it	eq
   d5e98:	4290      	cmpeq	r0, r2
   d5e9a:	bf2c      	ite	cs
   d5e9c:	17d8      	asrcs	r0, r3, #31
   d5e9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5ea2:	f040 0001 	orr.w	r0, r0, #1
   d5ea6:	4770      	bx	lr
   d5ea8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5eb0:	d102      	bne.n	d5eb8 <__cmpdf2+0x64>
   d5eb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5eb6:	d107      	bne.n	d5ec8 <__cmpdf2+0x74>
   d5eb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ebc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ec0:	d1d6      	bne.n	d5e70 <__cmpdf2+0x1c>
   d5ec2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5ec6:	d0d3      	beq.n	d5e70 <__cmpdf2+0x1c>
   d5ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5ecc:	4770      	bx	lr
   d5ece:	bf00      	nop

000d5ed0 <__aeabi_cdrcmple>:
   d5ed0:	4684      	mov	ip, r0
   d5ed2:	4610      	mov	r0, r2
   d5ed4:	4662      	mov	r2, ip
   d5ed6:	468c      	mov	ip, r1
   d5ed8:	4619      	mov	r1, r3
   d5eda:	4663      	mov	r3, ip
   d5edc:	e000      	b.n	d5ee0 <__aeabi_cdcmpeq>
   d5ede:	bf00      	nop

000d5ee0 <__aeabi_cdcmpeq>:
   d5ee0:	b501      	push	{r0, lr}
   d5ee2:	f7ff ffb7 	bl	d5e54 <__cmpdf2>
   d5ee6:	2800      	cmp	r0, #0
   d5ee8:	bf48      	it	mi
   d5eea:	f110 0f00 	cmnmi.w	r0, #0
   d5eee:	bd01      	pop	{r0, pc}

000d5ef0 <__aeabi_dcmpeq>:
   d5ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ef4:	f7ff fff4 	bl	d5ee0 <__aeabi_cdcmpeq>
   d5ef8:	bf0c      	ite	eq
   d5efa:	2001      	moveq	r0, #1
   d5efc:	2000      	movne	r0, #0
   d5efe:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f02:	bf00      	nop

000d5f04 <__aeabi_dcmplt>:
   d5f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f08:	f7ff ffea 	bl	d5ee0 <__aeabi_cdcmpeq>
   d5f0c:	bf34      	ite	cc
   d5f0e:	2001      	movcc	r0, #1
   d5f10:	2000      	movcs	r0, #0
   d5f12:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f16:	bf00      	nop

000d5f18 <__aeabi_dcmple>:
   d5f18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f1c:	f7ff ffe0 	bl	d5ee0 <__aeabi_cdcmpeq>
   d5f20:	bf94      	ite	ls
   d5f22:	2001      	movls	r0, #1
   d5f24:	2000      	movhi	r0, #0
   d5f26:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f2a:	bf00      	nop

000d5f2c <__aeabi_dcmpge>:
   d5f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f30:	f7ff ffce 	bl	d5ed0 <__aeabi_cdrcmple>
   d5f34:	bf94      	ite	ls
   d5f36:	2001      	movls	r0, #1
   d5f38:	2000      	movhi	r0, #0
   d5f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f3e:	bf00      	nop

000d5f40 <__aeabi_dcmpgt>:
   d5f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5f44:	f7ff ffc4 	bl	d5ed0 <__aeabi_cdrcmple>
   d5f48:	bf34      	ite	cc
   d5f4a:	2001      	movcc	r0, #1
   d5f4c:	2000      	movcs	r0, #0
   d5f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5f52:	bf00      	nop

000d5f54 <__aeabi_dcmpun>:
   d5f54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f5c:	d102      	bne.n	d5f64 <__aeabi_dcmpun+0x10>
   d5f5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f62:	d10a      	bne.n	d5f7a <__aeabi_dcmpun+0x26>
   d5f64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f6c:	d102      	bne.n	d5f74 <__aeabi_dcmpun+0x20>
   d5f6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f72:	d102      	bne.n	d5f7a <__aeabi_dcmpun+0x26>
   d5f74:	f04f 0000 	mov.w	r0, #0
   d5f78:	4770      	bx	lr
   d5f7a:	f04f 0001 	mov.w	r0, #1
   d5f7e:	4770      	bx	lr

000d5f80 <__aeabi_d2iz>:
   d5f80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f88:	d215      	bcs.n	d5fb6 <__aeabi_d2iz+0x36>
   d5f8a:	d511      	bpl.n	d5fb0 <__aeabi_d2iz+0x30>
   d5f8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f94:	d912      	bls.n	d5fbc <__aeabi_d2iz+0x3c>
   d5f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5fa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5fa6:	fa23 f002 	lsr.w	r0, r3, r2
   d5faa:	bf18      	it	ne
   d5fac:	4240      	negne	r0, r0
   d5fae:	4770      	bx	lr
   d5fb0:	f04f 0000 	mov.w	r0, #0
   d5fb4:	4770      	bx	lr
   d5fb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5fba:	d105      	bne.n	d5fc8 <__aeabi_d2iz+0x48>
   d5fbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5fc0:	bf08      	it	eq
   d5fc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5fc6:	4770      	bx	lr
   d5fc8:	f04f 0000 	mov.w	r0, #0
   d5fcc:	4770      	bx	lr
   d5fce:	bf00      	nop

000d5fd0 <__aeabi_d2uiz>:
   d5fd0:	004a      	lsls	r2, r1, #1
   d5fd2:	d211      	bcs.n	d5ff8 <__aeabi_d2uiz+0x28>
   d5fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5fd8:	d211      	bcs.n	d5ffe <__aeabi_d2uiz+0x2e>
   d5fda:	d50d      	bpl.n	d5ff8 <__aeabi_d2uiz+0x28>
   d5fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5fe4:	d40e      	bmi.n	d6004 <__aeabi_d2uiz+0x34>
   d5fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5ff2:	fa23 f002 	lsr.w	r0, r3, r2
   d5ff6:	4770      	bx	lr
   d5ff8:	f04f 0000 	mov.w	r0, #0
   d5ffc:	4770      	bx	lr
   d5ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6002:	d102      	bne.n	d600a <__aeabi_d2uiz+0x3a>
   d6004:	f04f 30ff 	mov.w	r0, #4294967295
   d6008:	4770      	bx	lr
   d600a:	f04f 0000 	mov.w	r0, #0
   d600e:	4770      	bx	lr

000d6010 <__aeabi_d2f>:
   d6010:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6014:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6018:	bf24      	itt	cs
   d601a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d601e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6022:	d90d      	bls.n	d6040 <__aeabi_d2f+0x30>
   d6024:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6028:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d602c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6030:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6034:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6038:	bf08      	it	eq
   d603a:	f020 0001 	biceq.w	r0, r0, #1
   d603e:	4770      	bx	lr
   d6040:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6044:	d121      	bne.n	d608a <__aeabi_d2f+0x7a>
   d6046:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d604a:	bfbc      	itt	lt
   d604c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6050:	4770      	bxlt	lr
   d6052:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6056:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d605a:	f1c2 0218 	rsb	r2, r2, #24
   d605e:	f1c2 0c20 	rsb	ip, r2, #32
   d6062:	fa10 f30c 	lsls.w	r3, r0, ip
   d6066:	fa20 f002 	lsr.w	r0, r0, r2
   d606a:	bf18      	it	ne
   d606c:	f040 0001 	orrne.w	r0, r0, #1
   d6070:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6074:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6078:	fa03 fc0c 	lsl.w	ip, r3, ip
   d607c:	ea40 000c 	orr.w	r0, r0, ip
   d6080:	fa23 f302 	lsr.w	r3, r3, r2
   d6084:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6088:	e7cc      	b.n	d6024 <__aeabi_d2f+0x14>
   d608a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d608e:	d107      	bne.n	d60a0 <__aeabi_d2f+0x90>
   d6090:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6094:	bf1e      	ittt	ne
   d6096:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d609a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d609e:	4770      	bxne	lr
   d60a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d60a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d60a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d60ac:	4770      	bx	lr
   d60ae:	bf00      	nop

000d60b0 <__cxa_atexit>:
   d60b0:	b510      	push	{r4, lr}
   d60b2:	4c05      	ldr	r4, [pc, #20]	; (d60c8 <__cxa_atexit+0x18>)
   d60b4:	4613      	mov	r3, r2
   d60b6:	b12c      	cbz	r4, d60c4 <__cxa_atexit+0x14>
   d60b8:	460a      	mov	r2, r1
   d60ba:	4601      	mov	r1, r0
   d60bc:	2002      	movs	r0, #2
   d60be:	f3af 8000 	nop.w
   d60c2:	bd10      	pop	{r4, pc}
   d60c4:	4620      	mov	r0, r4
   d60c6:	bd10      	pop	{r4, pc}
   d60c8:	00000000 	.word	0x00000000

000d60cc <memcpy>:
   d60cc:	b510      	push	{r4, lr}
   d60ce:	1e43      	subs	r3, r0, #1
   d60d0:	440a      	add	r2, r1
   d60d2:	4291      	cmp	r1, r2
   d60d4:	d004      	beq.n	d60e0 <memcpy+0x14>
   d60d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60da:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60de:	e7f8      	b.n	d60d2 <memcpy+0x6>
   d60e0:	bd10      	pop	{r4, pc}

000d60e2 <memset>:
   d60e2:	4402      	add	r2, r0
   d60e4:	4603      	mov	r3, r0
   d60e6:	4293      	cmp	r3, r2
   d60e8:	d002      	beq.n	d60f0 <memset+0xe>
   d60ea:	f803 1b01 	strb.w	r1, [r3], #1
   d60ee:	e7fa      	b.n	d60e6 <memset+0x4>
   d60f0:	4770      	bx	lr
	...

000d60f4 <srand>:
   d60f4:	b538      	push	{r3, r4, r5, lr}
   d60f6:	4b12      	ldr	r3, [pc, #72]	; (d6140 <srand+0x4c>)
   d60f8:	681c      	ldr	r4, [r3, #0]
   d60fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60fc:	4605      	mov	r5, r0
   d60fe:	b9d3      	cbnz	r3, d6136 <srand+0x42>
   d6100:	2018      	movs	r0, #24
   d6102:	f7fe fab9 	bl	d4678 <malloc>
   d6106:	f243 330e 	movw	r3, #13070	; 0x330e
   d610a:	63a0      	str	r0, [r4, #56]	; 0x38
   d610c:	8003      	strh	r3, [r0, #0]
   d610e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6112:	8043      	strh	r3, [r0, #2]
   d6114:	f241 2334 	movw	r3, #4660	; 0x1234
   d6118:	8083      	strh	r3, [r0, #4]
   d611a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d611e:	80c3      	strh	r3, [r0, #6]
   d6120:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6124:	8103      	strh	r3, [r0, #8]
   d6126:	2305      	movs	r3, #5
   d6128:	8143      	strh	r3, [r0, #10]
   d612a:	230b      	movs	r3, #11
   d612c:	8183      	strh	r3, [r0, #12]
   d612e:	2201      	movs	r2, #1
   d6130:	2300      	movs	r3, #0
   d6132:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6138:	2200      	movs	r2, #0
   d613a:	611d      	str	r5, [r3, #16]
   d613c:	615a      	str	r2, [r3, #20]
   d613e:	bd38      	pop	{r3, r4, r5, pc}
   d6140:	2003e380 	.word	0x2003e380

000d6144 <strlen>:
   d6144:	4603      	mov	r3, r0
   d6146:	f813 2b01 	ldrb.w	r2, [r3], #1
   d614a:	2a00      	cmp	r2, #0
   d614c:	d1fb      	bne.n	d6146 <strlen+0x2>
   d614e:	1a18      	subs	r0, r3, r0
   d6150:	3801      	subs	r0, #1
   d6152:	4770      	bx	lr

000d6154 <dynalib_user>:
   d6154:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6164:	0000 0000 6144 6174 4220 6765 6e69 4400     ....Data Begin.D
   d6174:	7461 2061 6e45 0064 6552 6563 7669 6465     ata End.Received
   d6184:	6420 7461 2061 6f44 656e 5400 6d65 6570      data Done.Tempe
   d6194:	6172 7574 6572 203a 2000 0043 654c 6576     rature: . C.Leve
   d61a4:	3a6c 0020 4920 006e 7245 6f72 2072 6572     l: . In.Error re
   d61b4:	6461 6e69 2067 5352 3834 0035               ading RS485.

000d61c0 <_ZTVN5spark13EthernetClassE>:
	...
   d61c8:	46f7 000d 46ed 000d 46e3 000d 46d9 000d     .F...F...F...F..
   d61d8:	46cd 000d 46c1 000d 46b5 000d 46ad 000d     .F...F...F...F..
   d61e8:	46a3 000d 4699 000d 51a5 000d               .F...F...Q..

000d61f4 <_ZTV8SPIClass>:
	...
   d61fc:	4715 000d 4717 000d 616e 006e 766f 0066     .G...G..nan.ovf.
   d620c:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d621c:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d622c:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d623c:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d624c:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d625c:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d626c:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d627c:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d628c:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d629c:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d62ac:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d62bc:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d62cc:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d62dc:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d62ec:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d62fc:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d630c:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d631c <_ZTV9IPAddress>:
	...
   d6324:	4bb9 000d 4ba9 000d 4bab 000d               .K...K...K..

000d6330 <_ZTV9USBSerial>:
	...
   d6338:	4c91 000d 4ce1 000d 4cef 000d 47d1 000d     .L...L...L...G..
   d6348:	4ccd 000d 4c93 000d 4ca9 000d 4cdb 000d     .L...L...L...L..
   d6358:	4cbf 000d 4c8d 000d                         .L...L..

000d6360 <_ZTVN5spark13CellularClassE>:
	...
   d6368:	4df3 000d 4de9 000d 4ddf 000d 4d95 000d     .M...M...M...M..
   d6378:	4dd3 000d 4dc7 000d 4dbb 000d 4db3 000d     .M...M...M...M..
   d6388:	4da9 000d 4d9f 000d 51a5 000d               .M...M...Q..

000d6394 <_ZTV11USARTSerial>:
	...
   d639c:	4e2d 000d 4e7d 000d 4e8b 000d 47d1 000d     -N..}N...N...G..
   d63ac:	4e41 000d 4e63 000d 4e4f 000d 4e77 000d     AN..cN..ON..wN..
   d63bc:	4e2f 000d 4e33 000d                         /N..3N..

000d63c4 <_ZTV7TwoWire>:
	...
   d63cc:	4f3d 000d 4f87 000d 4f5f 000d 4f3f 000d     =O...O.._O..?O..
   d63dc:	4f67 000d 4f6f 000d 4f77 000d 4f7f 000d     gO..oO..wO...O..

000d63ec <_ZTVN5spark9MeshClassE>:
	...
   d63f4:	501f 000d 5015 000d 500b 000d 5001 000d     .P...P...P...P..
   d6404:	4ff5 000d 4fe9 000d 4fdd 000d 4fd5 000d     .O...O...O...O..
   d6414:	4fcb 000d 4fc1 000d 51a5 000d               .O...O...Q..

000d6420 <_ZTVN5spark12NetworkClassE>:
	...
   d6428:	513d 000d 5147 000d 5151 000d 515b 000d     =Q..GQ..QQ..[Q..
   d6438:	5165 000d 5171 000d 517d 000d 5189 000d     eQ..qQ..}Q...Q..
   d6448:	5191 000d 519b 000d 51a5 000d               .Q...Q...Q..

000d6454 <_ZSt7nothrow>:
   d6454:	0000 0000                                   ....

000d6458 <__sf_fake_stdin>:
	...

000d6478 <__sf_fake_stdout>:
	...

000d6498 <__sf_fake_stderr>:
	...

000d64b8 <link_const_variable_data_end>:
   d64b8:	000d431d 	.word	0x000d431d
   d64bc:	000d4701 	.word	0x000d4701
   d64c0:	000d4765 	.word	0x000d4765
   d64c4:	000d47a9 	.word	0x000d47a9
   d64c8:	000d4a35 	.word	0x000d4a35
   d64cc:	000d4a45 	.word	0x000d4a45
   d64d0:	000d4a7d 	.word	0x000d4a7d
   d64d4:	000d4dfd 	.word	0x000d4dfd
   d64d8:	000d50ed 	.word	0x000d50ed
   d64dc:	000d5271 	.word	0x000d5271
   d64e0:	000d5421 	.word	0x000d5421
   d64e4:	000d54a5 	.word	0x000d54a5
   d64e8:	000d5569 	.word	0x000d5569
   d64ec:	000d562d 	.word	0x000d562d
